{"version":3,"file":"hooks.server.js","sources":["../../../../src/hooks.server.js"],"sourcesContent":["import { env } from '$env/dynamic/private';\n\n// Keep server environment check but make it conditional\nif (process.env.NODE_ENV === 'development') {\n    console.log('Server environment variables:', {\n        AIRTABLE_BASE_ID: !!env.AIRTABLE_BASE_ID,\n        AIRTABLE_PAT: !!env.AIRTABLE_PAT,\n        MAPBOX_TOKEN: !!env.MAPBOX_TOKEN\n    });\n}\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n    // Ensure environment variables are available\n    if (!env.AIRTABLE_PAT || !env.AIRTABLE_BASE_ID || !env.MAPBOX_TOKEN) {\n        console.error('Missing required environment variables:', {\n            AIRTABLE_PAT: !env.AIRTABLE_PAT,\n            AIRTABLE_BASE_ID: !env.AIRTABLE_BASE_ID,\n            MAPBOX_TOKEN: !env.MAPBOX_TOKEN\n        });\n        return new Response('Server configuration error', { status: 500 });\n    }\n\n    // Keep API request logging for monitoring\n    if (event.url.pathname.startsWith('/api/')) {\n        console.log('API request:', {\n            path: event.url.pathname,\n            method: event.request.method,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    try {\n        // Handle API requests\n        if (event.url.pathname.startsWith('/api/')) {\n            const response = await resolve(event);\n            \n            console.log('API response:', {\n                status: response.status,\n                headers: Object.fromEntries(response.headers)\n            });\n            \n            // Only set content-type to application/json if it's not already set\n            // and it's not the static map endpoint\n            if (!response.headers.has('content-type') && !event.url.pathname.startsWith('/api/staticmap')) {\n                response.headers.set('content-type', 'application/json');\n            }\n            \n            return response;\n        }\n\n        // Handle all other requests normally\n        return await resolve(event);\n    } catch (error) {\n        console.error('Error in hooks.server.js:', error);\n        return new Response('Internal Server Error', { status: 500 });\n    }\n}\n"],"names":["env"],"mappings":";AAGA,IAAI,QAAQ,IAAI,aAAa,eAAe;AACxC,UAAQ,IAAI,iCAAiC;AAAA,IACzC,kBAAkB,CAAC,CAACA,YAAI;AAAA,IACxB,cAAc,CAAC,CAACA,YAAI;AAAA,IACpB,cAAc,CAAC,CAACA,YAAI;AAAA,EAC5B,CAAK;AACL;AAGO,eAAe,OAAO,EAAE,OAAO,WAAW;AAE7C,MAAI,CAACA,YAAI,gBAAgB,CAACA,YAAI,oBAAoB,CAACA,YAAI,cAAc;AACjE,YAAQ,MAAM,2CAA2C;AAAA,MACrD,cAAc,CAACA,YAAI;AAAA,MACnB,kBAAkB,CAACA,YAAI;AAAA,MACvB,cAAc,CAACA,YAAI;AAAA,IAC/B,CAAS;AACD,WAAO,IAAI,SAAS,8BAA8B,EAAE,QAAQ,IAAG,CAAE;AAAA,EACzE;AAGI,MAAI,MAAM,IAAI,SAAS,WAAW,OAAO,GAAG;AACxC,YAAQ,IAAI,gBAAgB;AAAA,MACxB,MAAM,MAAM,IAAI;AAAA,MAChB,QAAQ,MAAM,QAAQ;AAAA,MACtB,YAAW,oBAAI,KAAI,GAAG,YAAW;AAAA,IAC7C,CAAS;AAAA,EACT;AAEI,MAAI;AAEA,QAAI,MAAM,IAAI,SAAS,WAAW,OAAO,GAAG;AACxC,YAAM,WAAW,MAAM,QAAQ,KAAK;AAEpC,cAAQ,IAAI,iBAAiB;AAAA,QACzB,QAAQ,SAAS;AAAA,QACjB,SAAS,OAAO,YAAY,SAAS,OAAO;AAAA,MAC5D,CAAa;AAID,UAAI,CAAC,SAAS,QAAQ,IAAI,cAAc,KAAK,CAAC,MAAM,IAAI,SAAS,WAAW,gBAAgB,GAAG;AAC3F,iBAAS,QAAQ,IAAI,gBAAgB,kBAAkB;AAAA,MACvE;AAEY,aAAO;AAAA,IACnB;AAGQ,WAAO,MAAM,QAAQ,KAAK;AAAA,EAC7B,SAAQ,OAAO;AACZ,YAAQ,MAAM,6BAA6B,KAAK;AAChD,WAAO,IAAI,SAAS,yBAAyB,EAAE,QAAQ,IAAG,CAAE;AAAA,EACpE;AACA;"}