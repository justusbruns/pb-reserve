{"version":3,"file":"airtable.js","sources":["../../../../src/lib/server/airtable.js"],"sourcesContent":["// Get environment variables from process.env or $env/dynamic/private\nlet envVars;\ntry {\n    const { env } = await import('$env/dynamic/private');\n    envVars = env;\n} catch (error) {\n    envVars = process.env;\n}\n\n// Debug log the environment variables\nconsole.log('Initializing Airtable client with:', {\n    AIRTABLE_PAT: envVars.AIRTABLE_PAT ? 'Set' : 'Not set',\n    AIRTABLE_BASE_ID: envVars.AIRTABLE_BASE_ID ? 'Set' : 'Not set'\n});\n\n// Table IDs from Airtable\nconst TABLES = {\n    Events: 'tblbE17oxiSW6dMRu',\n    Reservations: 'tblcpzyw4RpwUqk8M',\n    Organizations: 'tbl9a7ZWAlnu8BuCD',\n    Persons: 'tblz3XLyxVLE35lw9',\n    Products: 'tbl71K5MsJCD0goFZ',\n    ProductGroups: 'tbl1Yze5UK4ORaICf',\n    Availability: 'tbl0xNLbp0S7hzgvo',\n    Configuration: 'tblotNICLMcUsCBrD'\n};\n\n// Helper function to make authenticated requests to Airtable\nasync function airtableRequest(endpoint, options = {}) {\n    const baseUrl = 'https://api.airtable.com/v0';\n    const url = `${baseUrl}/${envVars.AIRTABLE_BASE_ID}${endpoint}`;\n    \n    console.log('Making Airtable request:', {\n        url,\n        method: options.method || 'GET',\n        headers: {\n            'Authorization': 'Bearer [PAT]', // Don't log the actual token\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n    \n    const response = await fetch(url, {\n        ...options,\n        headers: {\n            'Authorization': `Bearer ${envVars.AIRTABLE_PAT}`,\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n\n    if (!response.ok) {\n        const error = await response.json();\n        console.error('Airtable request failed:', {\n            status: response.status,\n            statusText: response.statusText,\n            error\n        });\n        throw new Error(error.error?.message || response.statusText);\n    }\n\n    const data = await response.json();\n    console.log('Airtable response:', data);\n    return data;\n}\n\n// Base class to handle table operations\nclass Table {\n    constructor(tableName) {\n        this.tableName = TABLES[tableName];\n        console.log(`Initialized table: ${tableName} with ID: ${this.tableName}`);\n    }\n\n    async create(fields) {\n        console.log(`Creating record in ${this.tableName}:`, fields);\n        const response = await airtableRequest(`/${this.tableName}`, {\n            method: 'POST',\n            body: JSON.stringify({\n                records: [{\n                    fields\n                }]\n            })\n        });\n        return response.records[0];\n    }\n\n    async destroy(recordId) {\n        console.log(`Deleting record ${recordId} from ${this.tableName}`);\n        return airtableRequest(`/${this.tableName}/${recordId}`, {\n            method: 'DELETE'\n        });\n    }\n\n    async find(recordId) {\n        console.log(`Finding record ${recordId} in ${this.tableName}`);\n        return airtableRequest(`/${this.tableName}/${recordId}`);\n    }\n\n    async select(params = {}) {\n        console.log(`Selecting records from ${this.tableName}:`, params);\n        const queryParams = new URLSearchParams();\n        \n        if (params.maxRecords) {\n            queryParams.append('maxRecords', params.maxRecords);\n        }\n        if (params.view) {\n            queryParams.append('view', params.view);\n        }\n        if (params.filterByFormula) {\n            queryParams.append('filterByFormula', params.filterByFormula);\n        }\n        if (params.sort) {\n            queryParams.append('sort', JSON.stringify(params.sort));\n        }\n        if (params.offset) {\n            queryParams.append('offset', params.offset);\n        }\n\n        const queryString = queryParams.toString();\n        return airtableRequest(`/${this.tableName}${queryString ? `?${queryString}` : ''}`);\n    }\n\n    async update(recordId, fields) {\n        console.log(`Updating record ${recordId} in ${this.tableName}:`, fields);\n        const response = await airtableRequest(`/${this.tableName}/${recordId}`, {\n            method: 'PATCH',\n            body: JSON.stringify({\n                fields\n            })\n        });\n        return response;\n    }\n\n    async createBatch(records) {\n        console.log(`Creating batch records in ${this.tableName}:`, records);\n        const response = await airtableRequest(`/${this.tableName}`, {\n            method: 'POST',\n            body: JSON.stringify({\n                records: records.map(fields => ({ fields }))\n            })\n        });\n        return response.records;\n    }\n\n    async updateBatch(records) {\n        console.log(`Updating batch records in ${this.tableName}:`, records);\n        const response = await airtableRequest(`/${this.tableName}`, {\n            method: 'PATCH',\n            body: JSON.stringify({\n                records: records.map(({ id, fields }) => ({\n                    id,\n                    fields\n                }))\n            })\n        });\n        return response.records;\n    }\n\n    async destroyBatch(recordIds) {\n        console.log(`Deleting batch records from ${this.tableName}:`, recordIds);\n        const queryParams = new URLSearchParams();\n        recordIds.forEach(id => queryParams.append('records[]', id));\n        return airtableRequest(`/${this.tableName}?${queryParams.toString()}`, {\n            method: 'DELETE'\n        });\n    }\n}\n\n// Helper functions\nexport function formatRecord(record) {\n    if (!record) return null;\n    return {\n        id: record.id,\n        ...record.fields\n    };\n}\n\nexport function formatRecords(records) {\n    return records.map(formatRecord);\n}\n\nexport function handleAirtableError(error) {\n    console.error('Airtable error:', error);\n    \n    if (error.name === 'Error' && error.statusCode) {\n        // Handle Airtable API errors\n        const message = error.message || 'Unknown Airtable error';\n        const statusCode = error.statusCode;\n        \n        return {\n            error: true,\n            message,\n            statusCode\n        };\n    }\n    \n    // Handle other errors\n    return {\n        error: true,\n        message: error.message || 'Internal server error',\n        statusCode: 500\n    };\n}\n\n// Export base with table functions\nexport const base = {\n    Organizations: new Table('Organizations'),\n    Persons: new Table('Persons'),\n    Events: new Table('Events'),\n    Reservations: new Table('Reservations'),\n    Products: new Table('Products'),\n    ProductGroups: new Table('ProductGroups'),\n    Availability: new Table('Availability'),\n    Configuration: new Table('Configuration')\n};\n"],"names":[],"mappings":"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"}