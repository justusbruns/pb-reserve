{"version":3,"file":"auth.js","sources":["../../../../src/lib/server/auth.js"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport { env } from '$env/dynamic/private';\n\n/**\n * Middleware to protect API endpoints\n * @param {Request} request - The incoming request\n * @returns {Response|null} - Returns error response if unauthorized, null if authorized\n */\nexport async function requireAuth(request) {\n    try {\n        const authHeader = request.headers.get('Authorization');\n        \n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            return new Response(\n                JSON.stringify({ error: 'Authorization header missing or invalid' }),\n                {\n                    status: 401,\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n        }\n\n        const token = authHeader.split(' ')[1];\n        \n        // In a real application, you would validate the token here\n        // For now, we're using a simple environment variable comparison\n        if (token !== env.API_TOKEN) {\n            return new Response(\n                JSON.stringify({ error: 'Invalid token' }),\n                {\n                    status: 401,\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n        }\n\n        return null; // Auth successful\n    } catch (error) {\n        console.error('Auth error:', error);\n        return new Response(\n            JSON.stringify({ error: 'Internal server error' }),\n            {\n                status: 500,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }\n        );\n    }\n}\n\n/**\n * Helper to validate specific roles\n * @param {string[]} allowedRoles - Array of roles that are allowed\n * @param {string} userRole - The user's role\n * @returns {boolean} - Whether the user has permission\n */\nexport function hasRole(allowedRoles, userRole) {\n    return allowedRoles.includes(userRole);\n}\n"],"names":["env"],"mappings":";;AAQO,eAAe,YAAY,SAAS;AACvC,MAAI;AACA,UAAM,aAAa,QAAQ,QAAQ,IAAI,eAAe;AAEtD,QAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AAClD,aAAO,IAAI;AAAA,QACP,KAAK,UAAU,EAAE,OAAO,0CAAyC,CAAE;AAAA,QACnE;AAAA,UACI,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,gBAAgB;AAAA,UACxC;AAAA,QACA;AAAA,MACa;AAAA,IACb;AAEQ,UAAM,QAAQ,WAAW,MAAM,GAAG,EAAE,CAAC;AAIrC,QAAI,UAAUA,YAAI,WAAW;AACzB,aAAO,IAAI;AAAA,QACP,KAAK,UAAU,EAAE,OAAO,gBAAe,CAAE;AAAA,QACzC;AAAA,UACI,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,gBAAgB;AAAA,UACxC;AAAA,QACA;AAAA,MACa;AAAA,IACb;AAEQ,WAAO;AAAA,EACV,SAAQ,OAAO;AACZ,YAAQ,MAAM,eAAe,KAAK;AAClC,WAAO,IAAI;AAAA,MACP,KAAK,UAAU,EAAE,OAAO,wBAAuB,CAAE;AAAA,MACjD;AAAA,QACI,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,QACpC;AAAA,MACA;AAAA,IACS;AAAA,EACT;AACA;"}