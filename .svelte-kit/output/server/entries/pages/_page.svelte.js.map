{"version":3,"file":"_page.svelte.js","sources":["../../../../../src/images/Date.png?url","../../../../../src/images/Location.png?url","../../../../../src/images/Taal.png?url","../../../../../src/images/Print.jpg?url","../../../../../src/images/Branding.png?url","../../../../../src/images/Thema.png?url","../../../../../src/images/RB.png?url","../../../../../src/images/Coupon.png?url","../../../../../src/images/Speaker.png?url","../../../../../src/images/Logo PB.png?url","../../../../../src/lib/components/MapboxGeocoder.svelte","../../../../../src/DatumEnTijd/DatumEnTijd.svelte"],"sourcesContent":["export default \"__VITE_ASSET__CMnRNMQo__\"","export default \"__VITE_ASSET__Bd4TretW__\"","export default \"__VITE_ASSET__Dwfdudi2__\"","export default \"__VITE_ASSET__BEy$Vu25__\"","export default \"__VITE_ASSET__BSSTdEeT__\"","export default \"__VITE_ASSET__CFMIWKCr__\"","export default \"__VITE_ASSET__DSl24kA$__\"","export default \"__VITE_ASSET__BzMPATYB__\"","export default \"__VITE_ASSET__gwjayb9s__\"","export default \"__VITE_ASSET__C1ULGmbx__\"","<script>\n  import { onMount, createEventDispatcher } from 'svelte';\n\n  export let accessToken;\n  export let types = 'address';\n  export let countries = ['NL', 'BE', 'DE'];\n  export let language;\n  export let placeholder;\n\n  const dispatch = createEventDispatcher();\n\n  onMount(() => {\n    // Wait for MapboxGeocoder to be available\n    const checkInterval = setInterval(() => {\n      if (window.MapboxGeocoder) {\n        clearInterval(checkInterval);\n        initGeocoder();\n      }\n    }, 100);\n\n    function initGeocoder() {\n      const geocoder = new window.MapboxGeocoder({\n        accessToken,\n        types,\n        countries: Array.isArray(countries) ? countries.join(',') : countries,\n        language,\n        placeholder,\n        marker: false,\n      });\n\n      const container = document.getElementById('geocoder');\n      if (container) {\n        container.innerHTML = '';\n        geocoder.addTo(container);\n      }\n\n      geocoder.on('result', (event) => {\n        dispatch('result', event);\n      });\n\n      geocoder.on('clear', () => {\n        dispatch('clear');\n      });\n    }\n\n    return () => {\n      clearInterval(checkInterval);\n      const container = document.getElementById('geocoder');\n      if (container) {\n        container.innerHTML = '';\n      }\n    };\n  });\n</script>\n\n<div id=\"geocoder\"></div>\n\n<style>\n  #geocoder {\n    width: 100%;\n  }\n\n  :global(.mapboxgl-ctrl-geocoder) {\n    min-width: 100%;\n    font-size: 16px;\n    line-height: 20px;\n    font-family: \"Inter\", sans-serif;\n  }\n\n  :global(.mapboxgl-ctrl-geocoder--input) {\n    height: 36px;\n    padding: 6px 35px;\n    border: 1px solid #C9DA9A;\n    border-radius: 4px;\n    background-color: #326334;\n    color: #C9DA9A;\n  }\n\n  :global(.mapboxgl-ctrl-geocoder--input:focus) {\n    outline: none;\n    border-color: #C9DA9A;\n  }\n\n  :global(.mapboxgl-ctrl-geocoder--icon) {\n    fill: #C9DA9A;\n  }\n\n  :global(.mapboxgl-ctrl-geocoder--button) {\n    background: #326334;\n  }\n\n  :global(.mapboxgl-ctrl-geocoder--suggestion) {\n    color: #326334;\n    font-family: \"Inter\", sans-serif;\n  }\n\n  :global(.mapboxgl-ctrl-geocoder--suggestion-title) {\n    font-weight: bold;\n  }\n\n  :global(.mapboxgl-ctrl-geocoder--suggestion:hover) {\n    background-color: #C9DA9A;\n  }\n</style>\n","<script lang=\"ts\">\n  import { onMount, onDestroy, getContext } from \"svelte\";\n  import { fade, scale } from 'svelte/transition';\n  import dateImage from '../images/Date.png?url';\n  import locationImage from '../images/Location.png?url';\n  import languageImage from '../images/Taal.png?url';\n  import printImage from '../images/Print.jpg?url';\n  import brandingImage from '../images/Branding.png?url';\n  import themaImage from '../images/Thema.png?url';\n  import rbImage from '../images/RB.png?url';\n  import couponImage from '../images/Coupon.png?url';\n  import speakerImage from '../images/Speaker.png?url';\n  import pbLogo from '../images/Logo PB.png?url';\n  import type { EventFields } from 'types/Event';\n  import { writable } from 'svelte/store';\n  import { dateTimeUtils } from '../services/airtable/utils';\n  import { countryUtils } from '../services/airtable/utils';\n  import flatpickr from 'flatpickr';\n  import { Dutch } from 'flatpickr/dist/l10n/nl.js';\n  import 'flatpickr/dist/flatpickr.css';\n  import confetti from 'canvas-confetti';\n  import type { Translations } from './types';\n  import { geocodeAddress, reverseGeocode } from '$lib/client/apiClient';\n  import MapboxGeocoder from '$lib/components/MapboxGeocoder.svelte';\n\n  declare global {\n    interface Window {\n      MapboxGeocoder: any;\n    }\n  }\n\n  // Component props\n  const translations = getContext('translations');\n  const currentLang = translations?.locale || 'nl';\n\n  function getTranslation(key) {\n    if (!translations) {\n      console.warn('No translations found');\n      return key;\n    }\n    \n    const keys = key.split('.');\n    let value = translations;\n    \n    for (const k of keys) {\n      if (!value || !value[k]) {\n        console.warn(`Translation missing for key: ${key}`);\n        return key;\n      }\n      value = value[k];\n    }\n    \n    return value;\n  }\n\n  // Get context values\n  const mapboxToken = getContext('mapboxToken');\n  const apiToken = getContext('apiToken');\n\n  async function getOriginCoordinates() {\n    try {\n      if (!originAddress) {\n        console.warn('No origin address provided');\n        return;\n      }\n\n      console.log('Fetching coordinates for address:', originAddress);\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(originAddress)}.json?access_token=${mapboxToken}`);\n      const data = await response.json();\n      \n      if (data && data.features && data.features.length > 0) {\n        const [lng, lat] = data.features[0].center;\n        console.log('Found origin coordinates:', [lng, lat]);\n        originCoordinates = [lng, lat];\n      } else {\n        console.warn('No features found in geocoding response for origin');\n      }\n    } catch (error) {\n      console.error('Error getting origin coordinates:', error);\n    }\n  }\n\n  onMount(async () => {\n    try {\n      loadFormData(); // Load saved form data when component mounts\n      if (translations && translations.languages && translations.languages.language) {\n        languageTranslations = Object.keys(translations.languages.language).reduce((acc, key) => {\n          acc[key] = translations.languages.language[key] || key;\n          return acc;\n        }, {});\n      }\n\n      // Initialize origin coordinates first\n      try {\n        console.log('Initializing origin coordinates...');\n        await getOriginCoordinates();\n      } catch (error) {\n        console.error('Error getting origin coordinates:', error);\n        distanceError = getTranslation('errors.locationError');\n        return;\n      }\n\n      // Load product records\n      const poemBoothResponse = await fetch('/api/products/poem-booth-1');\n      const poemBoothRecord = await poemBoothResponse.json();\n      console.log('Poem Booth record:', poemBoothRecord);\n      \n      const eventPartnerResponse = await fetch('/api/products/eventpartner');\n      const eventPartnerRecord = await eventPartnerResponse.json();\n      console.log('Event Partner record:', eventPartnerRecord);\n      \n      const eventSpecialistResponse = await fetch('/api/products/eventspecialist');\n      const eventSpecialistRecord = await eventSpecialistResponse.json();\n      console.log('Event Specialist record:', eventSpecialistRecord);\n      \n      const brandingResponse = await fetch('/api/products/branding');\n      const brandingRecord = await brandingResponse.json();\n      console.log('Branding record:', brandingRecord);\n      \n      const themeResponse = await fetch('/api/products/theme');\n      const themeRecord = await themeResponse.json();\n      console.log('Theme record:', themeRecord);\n      \n      const standardPrinterResponse = await fetch('/api/products/printer-1');\n      const standardPrinterRecord = await standardPrinterResponse.json();\n      console.log('Printer record:', standardPrinterRecord);\n      \n      const roastResponse = await fetch('/api/products/roast');\n      const roastRecord = await roastResponse.json();\n      console.log('Roast record:', roastRecord);\n      \n      const transportResponse = await fetch('/api/products/transport');\n      const transportRecord = await transportResponse.json();\n      console.log('Transport record:', transportRecord);\n      \n      const languageResponse = await fetch('/api/products/extra-language');\n      const languageRecord = await languageResponse.json();\n      console.log('Language record:', languageRecord);\n\n      const keynoteResponse = await fetch('/api/products/keynote');\n      const keynoteRecord = await keynoteResponse.json();\n      console.log('Keynote record:', keynoteRecord);\n\n      // Store the record IDs\n      productIds = {\n        poemBooth: poemBoothRecord?.id,\n        eventPartner: eventPartnerRecord?.id,\n        eventSpecialist: eventSpecialistRecord?.id,\n        extraLanguage: languageRecord?.id,\n        branding: brandingRecord?.id,\n        theme: themeRecord?.id,\n        printer: standardPrinterRecord?.id,\n        roast: roastRecord?.id,\n        transport: transportRecord?.id,\n        keynote: keynoteRecord?.id\n      };\n\n      console.log('Final Product IDs:', productIds);\n\n      // Validate that we have all required product IDs\n      const missingProducts = Object.entries(productIds)\n        .filter(([key, value]) => !value)\n        .map(([key]) => key);\n\n      if (missingProducts.length > 0) {\n        console.error('Missing product IDs for:', missingProducts);\n        throw new Error(`Missing product IDs for: ${missingProducts.join(', ')}`);\n      }\n\n      // Set initial values\n      const initialDate = new Date();\n      initialDate.setDate(initialDate.getDate() + 7); // One week from now\n      \n      startDate = initialDate.toISOString().split('T')[0];\n      endDate = startDate;\n      startTime = \"09:00\";\n      endTime = \"17:00\";\n      \n      // Calculate initial price\n      totalPrice = 950; // Set default price for one day\n\n      return () => {\n        // Cleanup\n        if (geocoder) {\n          geocoder.destroy();\n        }\n      };\n    } catch (error) {\n      console.error('Error during initialization:', error);\n      throw error;\n    }\n  });\n\n  // Load form data from localStorage or API\n  async function loadFormData() {\n    if (typeof window === 'undefined') return; // Skip during SSR\n    try {\n      // First try to load from localStorage\n      const savedData = localStorage.getItem('formData');\n      if (savedData) {\n        const parsedData = JSON.parse(savedData);\n        Object.entries(parsedData).forEach(([key, value]) => {\n          if (key in window) {\n            window[key] = value;\n          }\n        });\n      }\n\n      // Then try to load from API if we have a reservation ID\n      const urlParams = new URLSearchParams(window.location.search);\n      const reservationId = urlParams.get('id');\n      \n      if (reservationId) {\n        const response = await fetch(`/api/reservations/${reservationId}`);\n        if (response.ok) {\n          const apiData = await response.json();\n          // Update form fields with API data\n          Object.entries(apiData).forEach(([key, value]) => {\n            if (key in window) {\n              window[key] = value;\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error loading form data:', error);\n    }\n  }\n\n  // Load form data on mount\n  onMount(() => {\n    loadFormData();\n  });\n\n  // Watch for date/time changes\n  $: {\n    if (startDate && endDate && startTime && endTime) {\n      const start = new Date(`${startDate}T${startTime}`);\n      const end = new Date(`${endDate}T${endTime}`);\n      \n      // Ensure end date/time is not before start date/time\n      if (end < start) {\n        endDate = startDate;\n        endTime = startTime;\n      }\n      \n      // Calculate event days and update prices\n      eventDays = calculateEventDays(startDate, endDate);\n      calculateTotalPrice();\n      calculateTransportFee();\n    }\n  }\n\n  onDestroy(() => {\n    if (dateRangePicker) {\n      dateRangePicker.destroy();\n    }\n  });\n\n  // Handle address search\n  async function handleAddressSearch() {\n    if (deliveryAddress.length > 2) {\n      try {\n        const data = await geocodeAddress(deliveryAddress, currentLang === 'en' ? 'en' : 'nl');\n        if (data && data.features) {\n          addressSuggestions = data.features.map(feature => ({\n            place_name: feature.place_name,\n            center: feature.center\n          }));\n        } else {\n          addressSuggestions = [];\n        }\n      } catch (error) {\n        console.error('Error searching address:', error);\n        addressSuggestions = [];\n      }\n    } else {\n      addressSuggestions = [];\n    }\n  }\n\n  // Handle address select\n  async function handleAddressSelect(result) {\n    try {\n      console.log('Address selected:', result);\n      const { result: { context = [], place_name = '', center = [] } = {} } = result;\n      \n      // Extract address components\n      const street = result.result.text || '';\n      const number = result.result.address || '';\n      const postalCode = result.result.context.find(item => item.id.startsWith('postcode'))?.text || '';\n      const city = result.result.context.find(item => item.id.startsWith('place'))?.text || '';\n      const countryName = result.result.context.find(item => item.id.startsWith('country'))?.text || '';\n      \n      // Find the matching country in our list\n      const matchingCountry = countries.find(c => \n        c.toLowerCase() === countryName.toLowerCase() ||\n        getTranslatedCountry(c).toLowerCase() === countryName.toLowerCase()\n      );\n\n      // Set the destination coordinates and update route\n      if (center?.length === 2) {\n        console.log('Setting destination coordinates:', center);\n        destinationCoordinates = [...center]; // Create a new array to ensure reactivity\n        await calculateDistance(center);\n      } else {\n        console.error('Invalid center coordinates:', center);\n        return;\n      }\n\n      // Show address fields and populate them\n      showAddressFields = true;\n      deliveryStreet = `${street} ${number}`.trim();\n      deliveryPostalCode = postalCode;\n      deliveryCity = city;\n      deliveryCountry = matchingCountry || '';\n    } catch (error) {\n      console.error('Error in handleAddressSelect:', error);\n    }\n  }\n\n  // Function to submit to Airtable\n  async function submitToAirtable(formData) {\n    try {\n      console.log('Submitting form:', formData);  \n\n      const response = await fetch('/api/submit-form', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiToken}`\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        console.error('Form submission failed:', error);\n        throw new Error(error.error || 'Failed to submit form');\n      }\n\n      const result = await response.json();\n      console.log('Form submission complete:', result);\n      return result;\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      throw error;\n    }\n  }\n\n  // Email Validation\n  function validateEmail(email: string): boolean {\n    // RFC 5322 compliant email regex\n    const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return emailRegex.test(email.toLowerCase());\n  }\n  \n  function handleEmailChange(event: Event) {\n    const target = event.target as HTMLInputElement;\n    email = target.value;\n    if (!email) {\n      emailError = getTranslation('errors.requiredField');\n    } else if (!validateEmail(email)) {\n      emailError = getTranslation('errors.emailError');\n    } else {\n      emailError = '';\n    }\n  }\n\n  function handleInvoiceEmailChange(event: Event) {\n    const target = event.target as HTMLInputElement;\n    invoiceContactEmail = target.value;\n    if (invoiceContactEmail && !validateEmail(invoiceContactEmail)) {\n        invoiceEmailError = getTranslation('errors.emailError');\n    } else {\n        invoiceEmailError = '';\n    }\n  }\n\n  function toggleDefinitive(event: Event) {\n    const checkbox = event.target as HTMLInputElement;\n    isDefinitive = checkbox.checked;\n    reservationType = isDefinitive ? 'definite' : 'info';\n  }\n\n  function toggleInvoiceContact(event) {\n    hasDifferentInvoiceContact = event.target.checked;\n    if (!hasDifferentInvoiceContact) {\n      // Use same contact info\n      invoiceContactName = contactName;\n      invoiceContactEmail = email;\n      invoiceContactPhone = contactPhone;\n    } else {\n      // Clear invoice contact fields\n      invoiceContactName = '';\n      invoiceContactEmail = '';\n      invoiceContactPhone = '';\n    }\n  }\n\n  $: if (!hasDifferentInvoiceContact) {\n    invoiceContactName = contactName;\n    invoiceContactEmail = email;\n    invoiceContactPhone = contactPhone;\n  }\n\n  async function handleAddressInput(event: Event) {\n    const target = event.target as HTMLInputElement;\n    deliveryAddress = target.value;\n    \n    if (deliveryAddress.length > 2) {\n      try {\n        const data = await geocodeAddress(deliveryAddress, currentLang === 'en' ? 'en' : 'nl');\n        console.log('Geocoding response:', data);\n        addressSuggestions = data.features;\n      } catch (error) {\n        console.error('Error fetching suggestions:', error);\n        addressSuggestions = [];\n      }\n    } else {\n      addressSuggestions = [];\n    }\n  }\n\n  async function selectAddress(suggestion: { text: string, coordinates: [number, number], context: any[] }) {\n    deliveryAddress = suggestion.text;\n    addressSuggestions = [];\n\n    // Extract country from context if available\n    const countryContext = suggestion.context?.find(item => item.id.startsWith('country'));\n    if (countryContext) {\n      const addressComponents = getAddressComponents(deliveryAddress);\n      \n      // Reconstruct the address with the explicit country\n      deliveryAddress = [\n        addressComponents.address_line_1,\n        addressComponents.address_line_2,\n        [addressComponents.postal_code, addressComponents.city].filter(Boolean).join(' '),\n        addressComponents.country\n      ].filter(Boolean).join(', ');\n    }\n\n    await calculateTransportFee();\n  }\n\n  async function calculateDistance(coordinates) {\n    if (!originCoordinates?.length || originCoordinates.length === 0) {\n      console.error('Origin coordinates not set');\n      calculatedDistance = 0;\n      transportFee = 0;\n      staticMapUrl = \"\";\n      routeGeometry = null;\n      return;\n    }\n\n    try {\n      const [lng, lat] = coordinates;\n      selectedCoordinates = [lng, lat];\n      \n      const response = await fetch(\n        `https://api.mapbox.com/directions/v5/mapbox/driving/${originCoordinates[0]},${originCoordinates[1]};${lng},${lat}?geometries=geojson&access_token=${mapboxToken}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.routes && data.routes[0]) {\n        // Distance is in meters, convert to kilometers\n        calculatedDistance = Math.round(data.routes[0].distance / 1000);\n        routeGeometry = data.routes[0].geometry;\n        console.log('Calculated distance:', calculatedDistance, 'km');\n\n        // Calculate transport fee\n        await calculateTransportFee();\n        \n        // Update map with route\n        await updateRouteVisualization();\n      } else {\n        console.error('No route found in response:', data);\n        distanceError = 'Could not calculate distance';\n        calculatedDistance = 0;\n        transportFee = 0;\n        staticMapUrl = \"\";\n        routeGeometry = null;\n      }\n    } catch (error) {\n      console.error('Error calculating distance:', error);\n      distanceError = 'Error calculating distance';\n      calculatedDistance = 0;\n      transportFee = 0;\n      staticMapUrl = \"\";\n      routeGeometry = null;\n    }\n  }\n\n  // Calculate transport fee based on distance and event duration\n  async function calculateTransportFee() {\n    if (calculatedDistance === 0 || distanceError) {\n      transportFee = 0;\n      return;\n    }\n    // Calculate transport fee based on distance and event duration\n    transportFee = calculatedDistance * (eventDays > 1 ? 4 : 2);\n  }\n\n  // Update transport fee when event days change\n  $: {\n    if (eventDays && calculatedDistance > 0) {\n      calculateTransportFee();\n    }\n  }\n\n  // Calculate event days when dates change\n  $: {\n    if (startDate && endDate) {\n      eventDays = calculateEventDays(startDate, endDate);\n    }\n  }\n\n  function formatCurrency(value: number): string {\n    return new Intl.NumberFormat('nl-NL', { style: 'currency', currency: 'EUR' }).format(value);\n  }\n\n  function formatNumber(value: number): string {\n    return new Intl.NumberFormat('nl-NL', { \n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value);\n  }\n\n  function toggleBranding() {\n    if (brandingAdded) {\n      extrasList = extrasList.filter(e => e.id !== 'branding');\n    } else {\n      extrasList = [...extrasList, { id: 'branding', price: 750 }];\n    }\n    brandingAdded = !brandingAdded;\n    calculateExtrasPrice();\n  }\n\n  function toggleThema() {\n    if (themaAdded) {\n      extrasList = extrasList.filter(e => e.id !== 'thema');\n    } else {\n      extrasList = [...extrasList, { id: 'thema', price: 750 }];\n    }\n    themaAdded = !themaAdded;\n    calculateExtrasPrice();\n  }\n\n  function toggleGetRoasted() {\n    if (getRoastedAdded) {\n      extrasList = extrasList.filter(e => e.id !== 'roasted');\n    } else {\n      extrasList = [...extrasList, { id: 'roasted', price: 350 }];\n    }\n    getRoastedAdded = !getRoastedAdded;\n    calculateExtrasPrice();\n  }\n\n  function toggleKeynote() {\n    keynoteAdded = !keynoteAdded;\n  }\n\n  function togglePrintOption() {\n    const days = calculateEventDays(startDate, endDate);\n    if (printOptionSelected) {\n      extrasList = extrasList.filter(e => e.id !== 'print');\n    } else {\n      extrasList = [...extrasList, { id: 'print', price: 500 * days }];\n    }\n    printOptionSelected = !printOptionSelected;\n    calculateExtrasPrice();\n  }\n\n  function calculateExtrasPrice() {\n    extrasPrice = extrasList.reduce((total, extra) => {\n      if (extra.id === 'print') {\n        return total + extra.price;\n      }\n      return total + extra.price;\n    }, 0);\n  }\n\n  // Handle language selection\n  function handleLanguageChange(event) {\n    const target = event.target as HTMLSelectElement;\n    const newLanguage = target.value;\n    \n    if (newLanguage !== \"Empty\" && !selectedLanguages.includes(newLanguage)) {\n      if (selectedLanguages.length === 0) {\n        primaryLanguage = newLanguage;\n        selectedLanguages = [newLanguage];\n        selectedLanguage = \"Empty\";\n      } else {\n        selectedLanguages = [...selectedLanguages, newLanguage];\n        selectedLanguage = \"Empty\";\n        \n        // Add to extras list for pricing (only for additional languages)\n        extrasList = [...extrasList, { id: `lang-${newLanguage}`, price: 125 }];\n        calculateExtrasPrice();\n      }\n    }\n  }\n\n  function removeLanguage(lang: string) {\n    if (selectedLanguages.length === 1) {\n      return; // Don't allow removal if it's the only language\n    }\n    \n    selectedLanguages = selectedLanguages.filter(l => l !== lang);\n    \n    // If we removed the primary language, set the first remaining language as primary\n    if (lang === primaryLanguage && selectedLanguages.length > 0) {\n      primaryLanguage = selectedLanguages[0];\n    }\n    \n    // Update extras list for pricing\n    extrasList = extrasList.filter(e => e.id !== `lang-${lang}`);\n    calculateExtrasPrice();\n  }\n\n  function addLanguage(language: string) {\n    if (!selectedLanguages.includes(language)) {\n      selectedLanguages = [...selectedLanguages, language];\n      extrasList = [...extrasList, { id: `lang-${language}`, price: 125 }];\n      calculateExtrasPrice();\n    }\n  }\n\n  // Reactive statement to update print price based on date changes\n  $: if (startDate && endDate) {\n    if (printOptionSelected) {\n      const days = calculateEventDays(startDate, endDate);\n      extrasList = extrasList.map(extra => {\n        if (extra.id === 'print') {\n          return { ...extra, price: 500 * days };\n        }\n        return extra;\n      });\n      calculateExtrasPrice();\n    }\n  }\n\n  // Reactive statement to update transport fee based on date changes\n  $: {\n    if (startDate && endDate && startTime && endTime) {\n      const start = new Date(`${startDate}T${startTime}`);\n      const end = new Date(`${endDate}T${endTime}`);\n      const days = calculateEventDays(startDate, endDate);\n      totalPrice = calculateRentalPrice(days);\n      \n      // Recalculate transport fee when dates change\n      if (calculatedDistance > 0 && calculatedDistance <= 300) {\n        const totalDistance = eventDays > 1 ? calculatedDistance * 4 : calculatedDistance * 2;\n        transportFee = totalDistance;\n\n      }\n\n      // Update print option price if selected\n      if (printOptionSelected) {\n        const printExtra = extrasList.find(e => e.id === 'print');\n        if (printExtra) {\n          printExtra.price = 500 * days;\n          calculateExtrasPrice();\n        }\n      }\n    }\n  }\n\n  function calculateTotalPrice() {\n    if (startDate && endDate) {\n      // Calculate base rental price\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      const diffTime = Math.abs(end.getTime() - start.getTime());\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n      \n      // Base price calculation using poem booth pricing\n      const basePrice = calculatePoemBoothPrice(diffDays);\n      \n      // Add transport fee if applicable\n      let totalTransport = transportFee || 0;\n      \n      // Add all extras\n      let totalExtras = extrasPrice || 0;\n      \n      // Calculate language costs (excluding first language)\n      const languageCost = selectedLanguages.length > 1 ? (selectedLanguages.length - 1) * 125 : 0;\n      \n      // Sum up all components before discount\n      const subtotal = basePrice + totalTransport + totalExtras + languageCost;\n      \n      // Apply coupon discount if valid\n      const finalDiscount = (couponDiscount > 0 && !couponError) ? couponDiscount : 0;\n      \n      // Calculate final total\n      totalPrice = subtotal - finalDiscount;\n    }\n  }\n\n  // Calculate poem booth price based on number of days\n  function calculatePoemBoothPrice(days: number): number {\n    if (days <= 0) return 0;\n    if (days === 1) return 950;  // First day\n    if (days === 2) return 950 + 750;  // First + second day\n    return 950 + 750 + ((days - 2) * 100);  // First + second + continuation days\n  }\n\n  // Calculate event days when dates change\n  function calculateEventDays(startDate: string, endDate: string): number {\n    if (!startDate || !endDate) return 0;\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n  }\n\n  $: {\n    if (startDate && endDate && startTime && endTime) {\n      const start = new Date(`${startDate}T${startTime}`);\n      const end = new Date(`${endDate}T${endTime}`);\n      const days = calculateEventDays(startDate, endDate);\n      totalPrice = calculateRentalPrice(days);\n    }\n  }\n\n  function calculateDays(start: Date, end: Date): number {\n    const oneDay = 24 * 60 * 60 * 1000;\n    const diffDays = Math.round(Math.abs((end.getTime() - start.getTime()) / oneDay));\n    return diffDays + 1; // Include both start and end day\n  }\n\n  function calculateRentalPrice(days: number): number {\n    if (days <= 0) return 0;\n    if (days === 1) return 950;  // First day\n    if (days === 2) return 950 + 750;  // First + second day\n    return 950 + 750 + ((days - 2) * 100);  // First + second + continuation days\n  }\n\n  $: {\n    if (startDate && endDate && startTime && endTime) {\n      const start = new Date(`${startDate}T${startTime}`);\n      const end = new Date(`${endDate}T${endTime}`);\n      const days = calculateDays(start, end);\n      totalPrice = calculateRentalPrice(days);\n    }\n  }\n\n  function handleCouponCode() {\n    couponError = '';\n    couponDiscount = 0;\n    \n    if (!couponCode) {\n      return;\n    }\n    \n    // Check for valid coupon codes\n    switch (couponCode.toUpperCase()) {\n      case 'EVENTPARTNER':\n        if (themaAdded && brandingAdded) {\n          couponDiscount = 750;\n        } else {\n          couponError = getTranslation('coupon.eventPartnerInvalid');\n        }\n        break;\n      case 'EVENTSPECIALIST':\n        couponDiscount = 100;\n        break;\n      default:\n        couponError = getTranslation('coupon.invalid');\n        break;\n    }\n    \n    // Recalculate total price\n    calculateTotalPrice();\n  }\n\n  // Recalculate coupon discount when Theme or Branding changes\n  $: {\n    if (themaAdded !== undefined || brandingAdded !== undefined) {\n      handleCouponCode();\n    }\n  }\n\n  $: totalPrice = calculateRentalPrice(eventDays) + extrasPrice + transportFee;\n  $: vatAmount = totalPrice * 0.21;\n  $: totalPriceInclVat = totalPrice + vatAmount;\n\n  $: priceBeforeVat = totalPrice - couponDiscount;\n  $: vatAmountAfterDiscount = priceBeforeVat * 0.21;\n  $: totalPriceWithDiscountInclVat = priceBeforeVat + vatAmountAfterDiscount;\n\n  // Form validation\n  let formValidation = {\n    event: {\n      isValid: () => eventName && startDate && endDate && startTime && endTime,\n    },\n    organization: {\n      isValid: () => accountName && address && postalCode && city && country,\n    },\n    contact: {\n      isValid: () => contactName && email && contactPhone && validateEmail(email) && validatePhone(contactPhone),\n    },\n    delivery: {\n      isValid: () => deliveryStreet && deliveryPostalCode && deliveryCity && deliveryCountry,\n    }\n  };\n\n  let formErrors = [];\n\n  function getMissingFields() {\n    formErrors = [];\n    \n    // Event Details\n    if (!eventName) formErrors.push(getTranslation('form.event'));\n    if (!startDate || !startTime) formErrors.push(getTranslation('form.startDate'));\n    if (!endDate || !endTime) formErrors.push(getTranslation('form.endDate'));\n    \n    // Company Details\n    if (!accountName) formErrors.push(getTranslation('form.accountName'));\n    if (!address) formErrors.push(getTranslation('form.address'));\n    if (!postalCode) formErrors.push(getTranslation('form.postalCode'));\n    if (!city) formErrors.push(getTranslation('form.city'));\n    if (!country) formErrors.push(getTranslation('form.country'));\n    \n    // Contact Details\n    if (!contactName) formErrors.push(getTranslation('form.contactName'));\n    if (!email || !validateEmail(email)) formErrors.push(getTranslation('form.email'));\n    if (!contactPhone || !validatePhone(contactPhone)) formErrors.push(getTranslation('form.phone'));\n    \n    // Delivery Details\n    if (!deliveryStreet) formErrors.push(getTranslation('form.deliveryStreet'));\n    if (!deliveryPostalCode) formErrors.push(getTranslation('form.deliveryPostalCode'));\n    if (!deliveryCity) formErrors.push(getTranslation('form.deliveryCity'));\n    if (!deliveryCountry) formErrors.push(getTranslation('form.deliveryCountry'));\n    \n    // Terms\n    if (!dimensionsAccepted) formErrors.push(getTranslation('form.dimensions'));\n    if (!termsAccepted) formErrors.push(getTranslation('form.terms'));\n    if (!paymentAccepted) formErrors.push(getTranslation('form.payment'));\n\n    return formErrors;\n  }\n\n  function isFormValid(): boolean {\n    // Required fields validation\n    const requiredFieldsValid = !!(\n      startDate && \n      startTime && \n      endDate && \n      endTime && \n      eventName &&\n      deliveryStreet &&\n      deliveryPostalCode &&\n      deliveryCity &&\n      deliveryCountry &&\n      accountName &&\n      address &&\n      postalCode &&\n      city &&\n      country &&\n      contactName &&\n      email &&\n      contactPhone &&\n      validatePhone(contactPhone) &&\n      validateEmail(email)\n    );\n\n    // Terms acceptance validation\n    const termsValid = !!(\n      termsAccepted &&\n      dimensionsAccepted &&\n      paymentAccepted\n    );\n\n    // Email format validation\n    const emailValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n\n    // Return overall form validity\n    return (\n      requiredFieldsValid &&\n      termsValid &&\n      emailValid &&\n      !distanceError && // No distance calculation errors\n      !emailError // No email validation errors\n    );\n  }\n\n  // Watch for changes in form fields and validate\n  $: {\n    if (email) {\n      emailError = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email) ? '' : 'Invalid email format';\n    }\n    if (invoiceContactEmail && hasDifferentInvoiceContact) {\n      invoiceEmailError = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(invoiceContactEmail) ? '' : 'Invalid email format';\n    }\n    if (contactPhone) {\n      phoneError = validatePhone(contactPhone) ? '' : 'Invalid phone number';\n    }\n  }\n\n  // Handle form submission\n  async function handleSubmit(event) {\n    event.preventDefault();\n    isSubmitting = true;\n    formErrors = [];\n    \n    try {\n      const missingFields = getMissingFields();\n      \n      if (missingFields.length > 0) {\n        isSubmitting = false;\n        const errorMessage = `${getTranslation('form.pleaseComplete')}:\\n${missingFields.join('\\n')}`;\n        throw new Error(errorMessage);\n      }\n\n      function formatDateToUTC(date: string, time: string): string {\n        if (!date || !time) return '';\n        const localDate = new Date(`${date}T${time}`);\n        return localDate.toISOString();\n      }\n\n      const formData = {\n        // Event details\n        eventName,\n        startDate: formatDateToUTC(startDate, startTime),\n        endDate: formatDateToUTC(endDate, endTime),\n        eventDays,\n        \n        // Company details\n        accountName,\n        email,\n        phone: contactPhone,\n        contactPerson: contactName,\n        vatNumber,\n        poNumber,\n        \n        // Company address\n        address,\n        postalCode,\n        city,\n        country,\n        \n        // Delivery address\n        deliveryBusinessName,\n        deliveryStreet,\n        deliveryPostalCode,\n        deliveryCity,\n        deliveryCountry,\n        destinationCoordinates: destinationCoordinates.join(','),\n        \n        // Pricing and options\n        calculatedDistance,\n        transportFee,\n        totalPrice,\n        selectedLanguages,\n        printOption: printOption || false,\n        couponCode: couponCode || ''\n      };\n\n      console.log('Form data prepared:', formData);\n\n      await submitToAirtable(formData);\n      console.log('Form submitted successfully');\n      submitSuccess = true;\n      triggerSuccessAnimation();\n      clearFormData(); // Clear saved data after successful submission\n    } catch (error) {\n      console.error('Error in form submission:', error);\n      submitError = getTranslation('errors.submitError');\n    } finally {\n      isSubmitting = false;\n    }\n  }\n\n  function triggerSuccessAnimation() {\n    // Fire confetti from the left\n    confetti({\n      particleCount: 100,\n      spread: 70,\n      origin: { x: 0.1, y: 0.5 }\n    });\n\n    // Fire confetti from the right\n    confetti({\n      particleCount: 100,\n      spread: 70,\n      origin: { x: 0.9, y: 0.5 }\n    });\n\n    // Fire golden confetti from the middle\n    setTimeout(() => {\n      confetti({\n        particleCount: 150,\n        spread: 100,\n        origin: { x: 0.5, y: 0.5 },\n        colors: ['#FFD700', '#FDB931', '#FFED4A']\n      });\n    }, 250);\n  }\n\n  // Save form data whenever relevant values change\n  $: {\n    if (startDate || endDate || startTime || endTime || eventName || locationName || \n        deliveryAddress || deliveryBusinessName || deliveryStreet || deliveryPostalCode || deliveryCity || deliveryCountry || \n        language || brandingAdded || themaAdded || getRoastedAdded || \n        keynoteAdded || printOptionSelected || selectedLanguages.length || selectedLanguage ||\n        transportFee || extrasPrice || extrasList.length || totalPrice || calculatedDistance ||\n        invoiceAddressInput) {\n      saveFormData();\n    }\n  }\n\n  // Form data handling\n  async function saveFormData() {\n    if (typeof window === 'undefined') return; // Skip during SSR\n    try {\n      const formData = {\n        startDate,\n        startTime,\n        endDate,\n        endTime,\n        eventName,\n        totalPrice,\n        transportFee,\n        locationName,\n        deliveryBusinessName,\n        deliveryStreet,\n        deliveryPostalCode,\n        deliveryCity,\n        deliveryCountry,\n        calculatedDistance,\n        extrasPrice,\n        language,\n        brandingAdded,\n        themaAdded,\n        getRoastedAdded,\n        keynoteAdded,\n        printOptionSelected,\n        eventDays,\n        extrasList,\n        selectedLanguages,\n        primaryLanguage,\n        productIds,\n      };\n\n      // Save to local storage\n      localStorage.setItem('formData', JSON.stringify(formData));\n      \n      // If this is a final submission, send to server\n      if (isSubmitting) {\n        const response = await fetch('/api/reservations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(formData)\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to submit form');\n        }\n\n        submitSuccess = true;\n        isSubmitting = false;\n      }\n    } catch (error) {\n      console.error('Error saving form data:', error);\n      submitError = error.message;\n      isSubmitting = false;\n    }\n  }\n\n  // Clear form data\n  async function clearFormData() {\n    if (typeof window === 'undefined') return; // Skip during SSR\n    try {\n      localStorage.removeItem('formData');\n    } catch (error) {\n      console.error('Error clearing form data:', error);\n    }\n  }\n\n  // Country translations\n  const countryTranslations = {\n    en: {\n      'Netherlands': 'Netherlands',\n      'Belgium': 'Belgium',\n      'Germany': 'Germany',\n      'France': 'France',\n      'Austria': 'Austria',\n      'Bulgaria': 'Bulgaria',\n      'Croatia': 'Croatia',\n      'Cyprus': 'Cyprus',\n      'Czech Republic': 'Czech Republic',\n      'Denmark': 'Denmark',\n      'Estonia': 'Estonia',\n      'Finland': 'Finland',\n      'Greece': 'Greece',\n      'Hungary': 'Hungary',\n      'Ireland': 'Ireland',\n      'Italy': 'Italy',\n      'Latvia': 'Latvia',\n      'Lithuania': 'Lithuania',\n      'Luxembourg': 'Luxembourg',\n      'Malta': 'Malta',\n      'Netherlands': 'Netherlands',\n      'Poland': 'Poland',\n      'Portugal': 'Portugal',\n      'Romania': 'Romania',\n      'Slovakia': 'Slovakia',\n      'Slovenia': 'Slovenia',\n      'Spain': 'Spain',\n      'Sweden': 'Sweden',\n      'United Kingdom': 'United Kingdom',\n      'Switzerland': 'Switzerland',\n      'Norway': 'Norway'\n    },\n    nl: {\n      'Netherlands': 'Nederland',\n      'Belgium': 'België',\n      'Germany': 'Duitsland',\n      'France': 'Frankrijk',\n      'Austria': 'Oostenrijk',\n      'Bulgaria': 'Bulgarije',\n      'Croatia': 'Kroatië',\n      'Cyprus': 'Cyprus',\n      'Czech Republic': 'Tsjechië',\n      'Denmark': 'Denemarken',\n      'Estonia': 'Estland',\n      'Finland': 'Finland',\n      'Greece': 'Griekenland',\n      'Hungary': 'Hongarije',\n      'Ireland': 'Ierland',\n      'Italy': 'Italië',\n      'Latvia': 'Letland',\n      'Lithuania': 'Litouwen',\n      'Luxembourg': 'Luxemburg',\n      'Malta': 'Malta',\n      'Poland': 'Polen',\n      'Portugal': 'Portugal',\n      'Romania': 'Roemenië',\n      'Slovakia': 'Slowakije',\n      'Slovenia': 'Slovenië',\n      'Spain': 'Spanje',\n      'Sweden': 'Zweden',\n      'United Kingdom': 'Verenigd Koninkrijk',\n      'Switzerland': 'Zwitserland',\n      'Norway': 'Noorwegen'\n    }\n  };\n\n  // Get translated country name based on current language\n  function getTranslatedCountry(country: string): string {\n    const lang = currentLang || 'en';\n    return countryTranslations[lang]?.[country] || country;\n  }\n\n  // Countries list for dropdowns\n  const countries = [\n    'Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic',\n    'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary',\n    'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands',\n    'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden',\n    'United Kingdom', 'Switzerland', 'Norway'\n  ];\n\n  // EU Countries list\n  const euCountries = [\n    'Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic',\n    'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary',\n    'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands',\n    'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden'\n  ];\n\n  // Check if a country is in the EU\n  function isEUCountry(countryName: string): boolean {\n    return euCountries.includes(countryName);\n  }\n\n  // Form visibility state\n  let showDeliveryFields = false;\n  let showInvoiceFields = false;\n  let showPricingDetails = false;\n  let showTermsAndConditions = false;\n  let showLanguageSelector = false;\n  let showExtrasSelector = false;\n\n  // Form variables\n  let className = \"\";\n  let startDate = \"2025-01-15\";\n  let startTime = \"09:00\";\n  let endDate = \"2025-01-15\";\n  let endTime = \"17:00\";\n  let eventName = \"\"; \n  let basePrice = 1500;\n  let languagePrice = 125; // Price per additional language\n  let brandingPrice = 750;\n  let themaPrice = 750;\n  let getRoastedPrice = 400;\n  let keynotePrice = 750;\n  let printPrice = 250;\n  let totalPrice = 0;\n  let extrasPrice = 0;\n  let couponDiscount = 0;\n\n  let locationName = \"\";\n  let suggestions = [];\n  let language = '';\n  let brandingAdded = false;\n  let themaAdded = false;\n  let getRoastedAdded = false;\n  let keynoteAdded = false;\n  let printOptionSelected = false;\n  let printOption = false; // Added printOption state variable\n  let eventDays = 1;\n  let extrasList = [];\n  let selectedLanguages = [];\n  let selectedLanguage = 'Empty';\n  let currentPath = '';\n  let primaryLanguage = \"Dutch\";\n  let isSubmitting = false;\n  let submitError = '';\n  let productIds = {\n    poemBooth: 'recPoEmBoOtH123',        // Base product\n    eventPartner: 'recEvTpArTnEr456',     // Event partner\n    eventSpecialist: 'recEvTsPeC789',     // Event specialist\n    extraLanguage: 'recExTrAlAnG012',     // Additional language\n    branding: 'recBrAnDiNg345',          // Branding\n    theme: 'recThEmE678',                // Theme\n    printer: 'recPrInTeR901',            // Printer\n    roast: 'recRoAsT234',                // Roast\n    transport: 'recTrAnSpOrT567',        // Transport\n    keynote: 'recKeYnOtE890'             // Keynote\n  };\n\n  // Delivery address fields\n  let deliveryBusinessName = '';\n  let deliveryStreet = '';\n  let deliveryPostalCode = '';\n  let deliveryCity = '';\n  let deliveryCountry = '';\n\n  // Company and contact info\n  let accountName = '';\n  let address = '';\n  let postalCode = '';\n  let city = '';\n  let country = ''; \n  let vatNumber = '';\n  let contactName = '';\n  let email = '';\n  let emailError = '';\n  let contactPhone = '';\n  let phoneError = '';\n  let invoiceContactEmail = '';\n  let invoiceEmailError = '';\n  let invoiceContactName = '';\n  let invoiceContactPhone = '';\n  let hasDifferentInvoiceContact = false;\n  let reservationType = 'info';\n  let isDefinitive = false;\n  let submitSuccess = false;\n  let poNumber = '';\n  let dateRangePicker;\n  let languageTranslations = {};\n  let couponCode = '';\n  let couponError = '';\n\n  // Address components\n  let addressComponents = {\n    businessName: '',\n    street: '',\n    postalCode: '',\n    city: '',\n    country: ''\n  };\n\n  // Terms and conditions\n  let termsAccepted = false;\n  let dimensionsAccepted = false;\n  let paymentAccepted = false;\n\n  // Invoice address\n  let invoiceAddressInput = '';\n  let billingAddressComponents = {\n    businessName: '',\n    street: '',\n    postalCode: '',\n    city: '',\n    country: ''\n  };\n\n  // Map related state\n  let staticMapUrl = '';\n  let isMapLoading = false;\n  let mapImageLoaded = false;\n  let showAddressFields = false;\n  let destinationCoordinates = [];\n  let originCoordinates = [];\n  let originAddress = 'Gedempt Hamerkanaal 111, 1021KP Amsterdam, The Netherlands';\n  let selectedCoordinates = [];\n  let distanceError = '';\n  let routeGeometry = null;\n  \n  // Distance and transport fee calculations\n  let calculatedDistance = 0;\n  let transportFee = 0;\n\n  // Function to update route visualization\n  async function updateRouteVisualization() {\n    try {\n      if (!originCoordinates?.length || originCoordinates.length === 0) {\n        console.warn('Missing coordinates for route visualization:', { originCoordinates, destinationCoordinates });\n        return;\n      }\n\n      console.log('Getting route between:', { origin: originCoordinates, destination: destinationCoordinates });\n      \n      // Get the route between origin and destination\n      const response = await fetch(\n        `https://api.mapbox.com/directions/v5/mapbox/driving/${originCoordinates[0]},${originCoordinates[1]};${destinationCoordinates[0]},${destinationCoordinates[1]}?geometries=geojson&access_token=${mapboxToken}`\n      );\n      \n      const routeData = await response.json();\n      console.log('Route data:', routeData);\n\n      if (routeData.routes && routeData.routes[0]) {\n        const route = routeData.routes[0];\n        const geojson = route.geometry;\n        \n        // Calculate bounding box from route coordinates\n        const coordinates = geojson.coordinates;\n        const lngs = coordinates.map(coord => coord[0]);\n        const lats = coordinates.map(coord => coord[1]);\n        \n        const minLng = Math.min(...lngs);\n        const maxLng = Math.max(...lngs);\n        const minLat = Math.min(...lats);\n        const maxLat = Math.max(...lats);\n        \n        // Add 20% padding\n        const lngPadding = (maxLng - minLng) * 0.2;\n        const latPadding = (maxLat - minLat) * 0.2;\n        const bbox = [\n          minLng - lngPadding,\n          minLat - latPadding,\n          maxLng + lngPadding,\n          maxLat + latPadding\n        ];\n\n        // Update static map with route visualization\n        const params = new URLSearchParams();\n        params.set('origin', `${originCoordinates[0]},${originCoordinates[1]}`);\n        params.set('destination', `${destinationCoordinates[0]},${destinationCoordinates[1]}`);\n        params.set('bbox', bbox.join(','));\n        params.set('geojson', JSON.stringify(geojson));\n\n        staticMapUrl = `/api/staticmap?${params.toString()}`;\n        isMapLoading = true;\n        console.log('Updated static map URL:', staticMapUrl);\n      }\n    } catch (error) {\n      console.error('Error updating route visualization:', error);\n    }\n  }\n\n  function decodeGeometry(str) {\n    const coordinates = [];\n    let index = 0;\n    let lat = 0;\n    let lng = 0;\n    let shift = 0;\n    let result = 0;\n    let byte = null;\n    let latitude_change;\n    let longitude_change;\n    const factor = Math.pow(10, 5);\n\n    // Coordinates have variable length when encoded, so just keep\n    // track of whether we've hit the end of the string. In each\n    // loop iteration, a single coordinate is decoded.\n    while (index < str.length) {\n      // Reset shift, result, and byte\n      byte = null;\n      shift = 0;\n      result = 0;\n\n      do {\n        byte = str.charCodeAt(index++) - 63;\n        result |= (byte & 0x1f) << shift;\n        shift += 5;\n      } while (byte >= 0x20);\n\n      latitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\n\n      shift = result = 0;\n\n      do {\n        byte = str.charCodeAt(index++) - 63;\n        result |= (byte & 0x1f) << shift;\n        shift += 5;\n      } while (byte >= 0x20);\n\n      longitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\n\n      lat += latitude_change;\n      lng += longitude_change;\n\n      coordinates.push([lng / factor, lat / factor]);\n    }\n\n    return coordinates;\n  }\n\n  function generateStaticMapUrl(origin, destination) {\n    isMapLoading = true;\n    mapImageLoaded = false;\n    \n    if (!origin || !destination || origin.length !== 2 || destination.length !== 2 || !routeGeometry) {\n      console.log('Invalid coordinates or route geometry for map:', { origin, destination, hasGeometry: !!routeGeometry });\n      return \"\";\n    }\n    \n    const [originLng, originLat] = origin;\n    const [destLng, destLat] = destination;\n    \n    // Decode the route geometry to get all coordinates\n    const coordinates = decodeGeometry(routeGeometry);\n    \n    // Calculate bounding box from all route coordinates\n    const lngs = coordinates.map(coord => coord[0]);\n    const lats = coordinates.map(coord => coord[1]);\n    const minLng = Math.min(...lngs);\n    const maxLng = Math.max(...lngs);\n    const minLat = Math.min(...lats);\n    const maxLat = Math.max(...lats);\n    \n    // Add padding to the bounds\n    const padding = 0.2; // Increased padding to 20%\n    const bbox = [\n      minLng - (maxLng - minLng) * padding,\n      minLat - (maxLat - minLat) * padding,\n      maxLng + (maxLng - minLng) * padding,\n      maxLat + (maxLat - minLat) * padding\n    ].join(',');\n    \n    // Create GeoJSON with the actual route coordinates\n    const geojson = {\n      type: \"Feature\",\n      properties: {\n        \"stroke\": \"#326334\",\n        \"stroke-width\": 5\n      },\n      geometry: {\n        type: \"LineString\",\n        coordinates: coordinates\n      }\n    };\n    \n    console.log('Map coordinates:', {\n      origin: [originLng, originLat],\n      destination: [destLng, destLat],\n      routePoints: coordinates.length,\n      bbox\n    });\n    \n    // Use server endpoint to get the map URL\n    const mapUrl = `/api/staticmap?origin=${originLng},${originLat}&destination=${destLng},${destLat}&bbox=${bbox}&geojson=${encodeURIComponent(JSON.stringify(geojson))}`;\n    \n    console.log('Generated map URL:', mapUrl);\n    return mapUrl;\n  }\n\n  // Handle geocoder clear\n  function handleGeocderClear() {\n    showAddressFields = false;\n    deliveryBusinessName = '';\n    deliveryStreet = '';\n    deliveryPostalCode = '';\n    deliveryCity = '';\n    deliveryCountry = '';\n    destinationCoordinates = [];\n    staticMapUrl = \"\";\n    calculatedDistance = 0;\n    transportFee = 0;\n  }\n\n  // Handle geocoder result\n  function handleGeocderResult(event) {\n    handleAddressSelect(event.detail);\n  }\n\n  function validatePhone(phone: string): boolean {\n    // Basic phone validation - allows for international format\n    const phoneRegex = /^\\+?[\\d\\s-()]{10,}$/;\n    const isValid = phoneRegex.test(phone);\n    phoneError = isValid ? '' : getTranslation('errors.invalidPhone') || 'Invalid phone number';\n    return isValid;\n  }\n</script>\n\n<style>\n  /* Scoped styles for the geocoder container */\n  :global(#geocoder) {\n    width: 100%;\n    max-width: 100%;\n  }\n\n  :global(#geocoder .mapboxgl-ctrl-geocoder) {\n    width: 100%;\n    max-width: 100%;\n    box-shadow: none;\n    font-family: \"Inter\", sans-serif;\n    border: none;\n    background: #326334;\n    border-radius: 7px;\n    min-height: 50px;\n    margin: 0;\n  }\n\n  :global(#geocoder .mapboxgl-ctrl-geocoder--input) {\n    height: 50px;\n    border: none;\n    background: #326334;\n    color: #C9DA9A;\n    padding: 12px 16px;\n    font-family: \"Inter\", sans-serif;\n    font-size: 16px;\n    min-height: 50px;\n    width: 100%;\n    margin: 0;\n    border-radius: 7px;\n  }\n\n  :global(#geocoder .mapboxgl-ctrl-geocoder--input::placeholder) {\n    color: #C9DA9A;\n    opacity: 1;\n    font-family: \"Inter\", sans-serif;\n    font-size: 16px;\n    font-weight: normal;\n  }\n\n  :global(#geocoder .mapboxgl-ctrl-geocoder--icon),\n  :global(#geocoder .mapboxgl-ctrl-geocoder--button) {\n    display: none;\n  }\n\n  :global(#geocoder .mapboxgl-ctrl-geocoder--suggestions) {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    background: #326334;\n    border: 2px solid #C9DA9A;\n    border-top: none;\n    border-radius: 0 0 7px 7px;\n    margin-top: -2px;\n    color: #C9DA9A;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 0;\n    margin: 0;\n  }\n\n  :global(#geocoder .mapboxgl-ctrl-geocoder--suggestion) {\n    color: #C9DA9A;\n    padding: 12px 16px;\n    cursor: pointer;\n    border-bottom: 1px solid rgba(201, 218, 154, 0.2);\n    font-family: \"Inter\", sans-serif;\n    font-size: 16px;\n    line-height: 1.4;\n    background: #326334;\n    margin: 0;\n  }\n\n  :global(#geocoder .mapboxgl-ctrl-geocoder--suggestion *) {\n    background: #326334;\n    margin: 0;\n  }\n\n  :global(.text) {\n    width: 100% !important;\n    max-width: 100% !important;\n    box-sizing: border-box !important;\n  }\n\n  .input-container {\n    width: 100%;\n    max-width: 100%;\n  }\n\n  .keynote-remark {\n    text-align: center;\n    margin: 20px auto;\n    padding: 15px;\n    color: #C9DA9A;\n    font-size: 18px;\n    font-family: \"Inter\", sans-serif;\n    border: 2px solid #C9DA9A;\n    border-radius: 10px;\n    background-color: rgba(201, 218, 154, 0.1);\n    max-width: fit-content;\n    font-weight: normal;\n  }\n\n  .success-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.85);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n  }\n\n  .success-modal {\n    background: #326334;\n    padding: 40px;\n    border-radius: 15px;\n    text-align: center;\n    color: #C9DA9A;\n    max-width: 90%;\n    width: 500px;\n  }\n\n  .success-icon {\n    margin-bottom: 20px;\n    width: 120px;\n    height: 120px;\n    margin: 0 auto 20px;\n    background-image: var(--pb-logo);\n    background-size: contain;\n    background-position: center;\n    background-repeat: no-repeat;\n  }\n\n  .success-modal h2 {\n    font-size: 24px;\n    margin-bottom: 15px;\n    color: #C9DA9A;\n  }\n\n  .success-modal p {\n    font-size: 16px;\n    line-height: 1.5;\n    margin-bottom: 25px;\n    color: #C9DA9A;\n  }\n\n  .back-button {\n    display: inline-block;\n    padding: 12px 24px;\n    background: #C9DA9A;\n    color: #326334;\n    text-decoration: none;\n    border-radius: 7px;\n    font-weight: 500;\n    transition: all 0.3s ease;\n  }\n\n  .back-button:hover {\n    background: #d8e4b6;\n    transform: translateY(-2px);\n  }\n\n  .loading-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #C9DA9A;\n    transition: opacity 0.3s ease-out;\n  }\n\n  .loading-container.hidden {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  .loading-van {\n    animation: bounce 1s infinite ease-in-out;\n  }\n\n  @keyframes bounce {\n    0%, 100% {\n      transform: translateY(0);\n    }\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n\n  .map-image {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: opacity 0.5s ease-in;\n  }\n\n  .map-image.visible {\n    opacity: 1 !important;\n  }\n\n  .error-message {\n    background-color: #fff3f3;\n    border: 1px solid #326334;\n    border-radius: 4px;\n    padding: 1rem;\n    margin: 1rem 0;\n    color: #326334;\n  }\n\n  .error-message ul {\n    margin: 0.5rem 0 0 1.5rem;\n    padding: 0;\n  }\n\n  .error-message li {\n    margin: 0.25rem 0;\n  }\n</style>\n\n<div class=\"inclusief\">\n  <h1 class=\"h1\">{getTranslation('extras.title')}</h1>\n  <div class=\"features\">\n\n    <!-- Date Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{dateImage}');\"></div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('dateTime.period')}</span>\n          <span class=\"description-text-span2\">{getTranslation('dateTime.installationNote')}</span>\n          <span class=\"description-text-span2\" style=\"margin-top: 10px; margin-bottom: 5px;\">{getTranslation('dateTime.startDate')}</span>\n          <div class=\"input-group\">\n            <input \n              type=\"date\" \n              class=\"date-input\" \n              bind:value={startDate}\n              min={new Date().toISOString().split('T')[0]}\n              required\n            />\n            <input \n              type=\"time\" \n              class=\"time-input\" \n              bind:value={startTime}\n              required\n            />\n          </div>\n          <span class=\"description-text-span2\" style=\"margin-top: 12px; margin-bottom: 5px;\">{getTranslation('dateTime.endDate')}</span>\n          <div class=\"input-group\">\n            <input \n              type=\"date\" \n              class=\"date-input\" \n              bind:value={endDate}\n              min={startDate || new Date().toISOString().split('T')[0]}\n              required\n            />\n            <input \n              type=\"time\" \n              class=\"time-input\" \n              bind:value={endTime}\n              required\n            />\n          </div>\n          <span class=\"description-text-span2\" style=\"margin-top: 12px;\">{getTranslation('dateTime.baseRental')}: {formatCurrency(calculateRentalPrice(eventDays))}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Location Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{staticMapUrl || locationImage}'); background-size: cover; background-position: center;\">\n        <div class=\"loading-container\" class:hidden={!isMapLoading || mapImageLoaded}>\n          <svg class=\"loading-van\" width=\"130\" height=\"85\" viewBox=\"0 0 130 85\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M128.14 40.6507C127.406 39.3382 126.437 38.1715 125.275 37.2132C123.135 35.2861 121.114 33.2236 118.984 31.2861C116.577 27.682 113.869 24.2913 111.369 20.7497C108.786 17.1664 106.171 13.6039 103.515 10.0727C102.041 7.87479 100.348 5.82786 98.4681 3.96853C95.9056 1.72893 92.614 0.504924 89.2129 0.520658C80.7441 0.531075 72.2809 0.541491 63.8169 0.546699C53.9367 0.551907 44.0516 0.494616 34.1716 0.541491C26.3591 0.551907 18.5463 0.51545 10.7343 0.551908V0.557118C8.42693 0.426909 6.13533 1.06753 4.22906 2.38005C1.72906 4.32272 0.275997 7.31752 0.286397 10.4842C0.27598 27.1815 0.307231 43.8802 0.265564 60.5775C3.19783 60.5879 6.1301 60.5671 9.0625 60.6088C9.94791 58.9629 11.0209 57.4265 12.2656 56.0358C13.5156 54.791 14.8958 53.6817 16.3853 52.7337C21.703 49.6868 28.1145 49.2025 33.8333 51.4108H33.8281C35.7812 52.1556 37.5885 53.2181 39.1926 54.5514C41.1614 56.2441 42.7968 58.291 44.0156 60.5878C52.6145 60.5931 61.2089 60.5722 69.8076 60.6035C69.9117 59.2806 69.8336 57.9524 69.8596 56.6243C69.9273 41.1763 69.844 25.7283 69.8961 10.2856C69.8284 8.9731 70.818 7.84814 72.1253 7.73867C72.8024 7.67617 73.4742 7.88971 73.9846 8.33763C74.495 8.78034 74.7971 9.41575 74.8284 10.098C74.8023 26.9314 74.7971 43.77 74.8128 60.6034C77.6982 60.5982 80.5888 60.5929 83.4742 60.5825C84.3648 58.8221 85.5054 57.2076 86.8649 55.7804C89.1722 53.4627 92.016 51.7544 95.1513 50.8168C97.4898 50.1762 99.9221 49.9314 102.344 50.0824C109.162 50.5303 115.24 54.5251 118.365 60.598C121.99 60.5928 125.61 60.6032 129.235 60.5876C129.235 58.7595 129.261 56.9313 129.23 55.098C129.204 55.0459 129.146 54.9366 129.115 54.8845C127.86 54.723 126.584 54.9105 125.324 54.7959C123.912 54.6032 122.704 53.7022 122.115 52.4053C121.631 51.2646 121.662 49.9678 122.209 48.8531C122.756 47.8531 123.824 47.2542 124.964 47.3167C126.402 47.3271 127.844 47.3115 129.287 47.3323C129.495 45.0406 129.105 42.7386 128.141 40.6501L128.14 40.6507Z\" fill=\"#326334\"/>\n            <path d=\"M37.4013 59.7027C35.3232 57.536 32.6721 56.01 29.7555 55.3016C28.0732 54.9578 26.3388 54.8901 24.6304 55.0933C22.8179 55.3172 21.0627 55.8693 19.4481 56.7235C16.646 58.2339 14.4065 60.6038 13.0575 63.4891C11.6772 66.4318 11.2919 69.7443 11.9533 72.9266C12.6616 76.1766 14.4064 79.1037 16.9325 81.2755C21.5262 85.1401 27.9794 85.911 33.3538 83.2339C38.4997 80.6558 41.6924 75.3433 41.5517 69.5939C41.4059 65.9013 39.9327 62.3903 37.4013 59.7027Z\" fill=\"#326334\"/>\n            <path d=\"M106.437 56.0626C104.073 55.0679 101.474 54.7397 98.9373 55.1252C95.781 55.4949 92.8332 56.8752 90.5258 59.0626C88.2602 61.3334 86.7394 64.2449 86.1665 67.4012C85.0311 74.0001 88.4373 80.547 94.4998 83.4012C98.6457 85.3596 103.469 85.3074 107.573 83.2605C111.682 81.2136 114.62 77.396 115.557 72.9012C116.208 69.5835 115.713 66.1408 114.151 63.1408C112.489 59.9481 109.76 57.4429 106.437 56.0626Z\" fill=\"#326334\"/>\n            <path d=\"M0.0155792 65.416C-0.0417128 66.3483 0.0103698 67.2909 0.177032 68.2129C0.614539 70.1088 1.97397 71.6556 3.8021 72.3275C4.87502 72.5931 5.97917 72.6816 7.0833 72.5931C6.69267 70.2128 6.79685 67.7806 7.39581 65.442C4.93741 65.4368 2.47398 65.4733 0.0155792 65.416Z\" fill=\"#326334\"/>\n            <path d=\"M60.1093 65.4893C55.3645 65.4737 50.6145 65.5466 45.8693 65.406H45.8745C46.4995 67.7393 46.6349 70.1768 46.2756 72.5675C57.9526 72.5987 69.6302 72.5623 81.3062 72.5883C80.926 70.2028 81.0771 67.7654 81.7542 65.4476C74.5406 65.4581 67.3227 65.4998 60.1093 65.4893Z\" fill=\"#326334\"/>\n            <path d=\"M119.989 65.416C120.64 67.7337 120.776 70.166 120.385 72.5411C121.609 72.5931 122.838 72.5983 124.062 72.5723C125.942 72.4525 127.62 71.3431 128.468 69.6556C129.12 68.3536 129.385 66.8952 129.245 65.4474C126.156 65.4161 123.073 65.4472 119.989 65.416Z\" fill=\"#326334\"/>\n            <path d=\"M25.5307 66.9173C24.1713 67.3913 23.2807 68.7037 23.3536 70.1465C23.4317 71.5215 24.3796 72.6935 25.7129 73.058C27.041 73.4226 28.4525 72.8965 29.2233 71.7559C29.9942 70.6153 29.9525 69.1048 29.114 68.0111C28.2806 66.9122 26.838 66.4747 25.5307 66.9173Z\" fill=\"#326334\"/>\n            <path d=\"M99.844 66.912C98.8648 67.287 98.1148 68.1047 97.8284 69.1098C97.6201 69.9432 97.7555 70.8234 98.2086 71.5525C98.6565 72.2817 99.3805 72.7973 100.219 72.9848C101.271 73.1983 102.354 72.8754 103.12 72.1306C103.891 71.3806 104.235 70.3025 104.052 69.2504C103.828 68.3649 103.25 67.6149 102.453 67.1722C101.657 66.7295 100.714 66.6359 99.844 66.912Z\" fill=\"#326334\"/>\n          </svg>\n        </div>\n        {#if staticMapUrl}\n          <img \n            class=\"map-image\"\n            class:visible={mapImageLoaded}\n            src={staticMapUrl} \n            alt=\"Route map\"\n            on:load={() => mapImageLoaded = true}\n          />\n        {/if}\n      </div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('transport.title')}</span>\n          <span class=\"description-text-span2\">{getTranslation('transport.costPerKm')}</span>\n        </div>\n        <div class=\"input-container\">\n          <MapboxGeocoder \n            accessToken={mapboxToken} \n            types=\"address\" \n            countries={['NL', 'BE', 'DE']} \n            language={currentLang} \n            placeholder={getTranslation('transport.deliveryAddressPlaceholder')} \n            on:result={handleGeocderResult} \n            on:clear={handleGeocderClear}\n          />\n          {#if showAddressFields}\n            <div class=\"address-fields\" transition:fade>\n              <div class=\"input-group full-width\">\n                <input \n                  type=\"text\" \n                  class=\"text\" \n                  id=\"delivery_business_name\" \n                  name=\"delivery_business_name\"\n                  bind:value={deliveryBusinessName}\n                  placeholder={getTranslation('form.deliveryBusinessNamePlaceholder')}\n                />\n              </div>\n              <div class=\"input-group full-width\">\n                <input \n                  type=\"text\" \n                  class=\"text\" \n                  id=\"delivery_street\" \n                  name=\"delivery_street\"\n                  bind:value={deliveryStreet}\n                  required\n                  placeholder={getTranslation('form.deliveryStreetPlaceholder')}\n                />\n              </div>\n              <div class=\"input-group full-width\">\n                <input \n                  type=\"text\" \n                  class=\"text\" \n                  id=\"delivery_postal_code\" \n                  name=\"delivery_postal_code\"\n                  bind:value={deliveryPostalCode}\n                  required\n                  placeholder={getTranslation('form.deliveryPostalCodePlaceholder')}\n                />\n                <input \n                  type=\"text\" \n                  class=\"text\" \n                  id=\"delivery_city\" \n                  name=\"delivery_city\"\n                  bind:value={deliveryCity}\n                  required\n                  placeholder={getTranslation('form.deliveryCityPlaceholder')}\n                />\n              </div>\n              <div class=\"input-group full-width\">\n                <select \n                  class=\"text\" \n                  id=\"delivery_country\" \n                  name=\"delivery_country\"\n                  bind:value={deliveryCountry}\n                  required\n                >\n                  <option value=\"\" disabled selected>{getTranslation('dateTime.address.country')}</option>\n                  {#each countries as countryOption}\n                    <option value={countryOption}>{getTranslatedCountry(countryOption)}</option>\n                  {/each}\n                </select>\n              </div>\n            </div>\n          {/if}\n        </div>\n        {#if calculatedDistance > 300}\n          <div class=\"description-text-2\">\n            <span class=\"description-text-span2 error\">{getTranslation('transport.longDistance')}</span>\n          </div>\n        {:else if calculatedDistance > 0}\n          <div class=\"description-text-2\">\n            <span class=\"description-text-span2\">{getTranslation('transport.transportCost')}: {formatCurrency(transportFee)}</span>\n          </div>\n        {/if}\n      </div>\n    </div>\n\n    <!-- Language Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{languageImage}');\"></div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('extras.language.title')}</span>\n          <span class=\"description-text-span2\">{getTranslation('extras.language.description')}</span>\n        </div>\n        <div class=\"description-text\">\n          <span class=\"description-text-span2\">{formatCurrency((selectedLanguages.length > 1 ? (selectedLanguages.length - 1) * 125 : 0))} {getTranslation('extras.language.totalText')}</span>\n        </div>\n        <div class=\"description-text\">\n          <div class=\"language-selection-container\">\n            <div class={'dropdown-language ' + className}>\n              <select class=\"language-select\" on:change={handleLanguageChange} bind:value={selectedLanguage}>\n                <option value=\"Empty\">{getTranslation('extras.language.select')}</option>\n                {#each Object.keys(languageTranslations) as lang}\n                  <option value={lang}>{languageTranslations[lang]}</option>\n                {/each}\n              </select>\n            </div>\n            {#if selectedLanguages.length > 0}\n              <div class=\"language-tags\">\n                {#each selectedLanguages as language}\n                  <div class=\"language-tag\">\n                    {languageTranslations[language]}\n                    <button class=\"remove-language\" on:click={() => removeLanguage(language)}>×</button>\n                  </div>\n                {/each}\n              </div>\n            {/if}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"inclusief\">\n  <h1 class=\"h1\">{getTranslation('extras.addExtras')}</h1>\n  <div class=\"features\">\n\n    <!-- Print Option Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{printImage}');\"></div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('extras.printOption.title')}</span>\n          <span class=\"description-text-span2\">{getTranslation('extras.printOption.description')}</span>\n        </div>\n        <div class=\"description-text\">\n          <span class=\"description-text-span2\">{getTranslation('extras.printOption.pricePerDay')}</span>\n        </div>\n        <div class=\"description-text\">\n          <span class=\"description-text-span2\">{formatCurrency(500 * calculateEventDays(startDate, endDate))} {getTranslation('extras.printOption.totalText')}</span>\n        </div>\n        <button \n          type=\"button\"\n          class=\"button\" \n          class:selected={printOption}\n          on:click={() => printOption = !printOption}\n        >\n          {printOption ? getTranslation('extras.printOption.remove') : getTranslation('extras.printOption.add')}\n        </button>\n      </div>\n    </div>\n\n    <!-- Branding Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{brandingImage}');\"></div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('extras.branding.title')}</span>\n          <span class=\"description-text-span2\">{getTranslation('extras.branding.description')}</span>\n        </div>\n        <div class=\"description-text\">\n          <span class=\"description-text-span2\">{formatCurrency(750)}</span>\n        </div>\n        <button \n          type=\"button\"\n          class=\"button\" \n          class:selected={brandingAdded} \n          on:click={toggleBranding}\n          on:keydown={(e) => e.key === 'Enter' && toggleBranding()}\n        >\n          {brandingAdded ? getTranslation('common.remove') : getTranslation('common.add')}\n        </button>\n      </div>\n    </div>\n\n    <!-- Thema Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{themaImage}');\"></div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('extras.theme.title')}</span>\n          <span class=\"description-text-span2\">{getTranslation('extras.theme.description')}</span>\n        </div>\n        <div class=\"description-text\">\n          <span class=\"description-text-span2\">{formatCurrency(750)}</span>\n        </div>\n        <button \n          type=\"button\"\n          class=\"button\" \n          class:selected={themaAdded} \n          on:click={toggleThema}\n          on:keydown={(e) => e.key === 'Enter' && toggleThema()}\n        >\n          {themaAdded ? getTranslation('common.remove') : getTranslation('common.add')}\n        </button>\n      </div>\n    </div>\n\n    <!-- Get Roasted Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{rbImage}');\"></div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('extras.getRoasted.title')}</span>\n          <span class=\"description-text-span2\">{getTranslation('extras.getRoasted.description')}</span>\n        </div>\n        <div class=\"description-text\">\n          <span class=\"description-text-span2\">{formatCurrency(350)}</span>\n        </div>\n        <button \n          type=\"button\"\n          class=\"button\" \n          class:selected={getRoastedAdded} \n          on:click={toggleGetRoasted}\n          on:keydown={(e) => e.key === 'Enter' && toggleGetRoasted()}\n        >\n          {getRoastedAdded ? getTranslation('common.remove') : getTranslation('common.add')}\n        </button>\n      </div>\n    </div>\n\n    <!-- Keynote Speaker Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{speakerImage}');\"></div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('extras.keynote.title')}</span>\n          <span class=\"description-text-span2\">{getTranslation('extras.keynote.description')}</span>\n        </div>\n        <div class=\"description-text\">\n          <span class=\"description-text-span2\">{getTranslation('pricing.priceUponRequest')}</span>\n        </div>\n        <button \n          type=\"button\"\n          class=\"button\" \n          class:selected={keynoteAdded} \n          on:click={toggleKeynote}\n          on:keydown={(e) => e.key === 'Enter' && toggleKeynote()}\n        >\n          {keynoteAdded ? getTranslation('common.remove') : getTranslation('common.add')}\n        </button>\n      </div>\n    </div>\n\n    <!-- Coupon Card -->\n    <div class=\"feature-2\">\n      <div class=\"image\" style=\"background-image: url('{couponImage}');\"></div>\n      <div class=\"description\">\n        <div class=\"description-text-2\">\n          <span class=\"description-text-span\">{getTranslation('coupon.title')}</span>\n          <span class=\"description-text-span2\">{getTranslation('coupon.description')}</span>\n        </div>\n        <div class=\"input-container\" style=\"display: flex; flex-direction: column; gap: 8px;\">\n          <input \n            type=\"text\" \n            bind:value={couponCode}\n            on:input={handleCouponCode}\n            placeholder={getTranslation('coupon.placeholder')}\n            class=\"text\"\n            class:error={couponError}\n          />\n          {#if couponError}\n            <div class=\"description-text-2\">\n              <span class=\"description-text-span2 error\">{couponError}</span>\n            </div>\n          {/if}\n          {#if couponDiscount > 0}\n            <div class=\"description-text-2\">\n              <span class=\"description-text-span2\">{getTranslation('pricing.discount')}: €{couponDiscount}</span>\n            </div>\n          {/if}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"inclusief\">\n  <h1 class=\"h1\">{getTranslation('pricing.overview')}</h1>\n  <table class=\"price-overview\">\n    <thead>\n      <tr>\n        <th>{getTranslation('pricing.quantity')}</th>\n        <th>{getTranslation('pricing.description')}</th>\n        <th>{getTranslation('pricing.price')}</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>{calculateEventDays(startDate, endDate)}</td>\n        <td>{getTranslation('pricing.rentalDays')}</td>\n        <td>{formatCurrency(calculateRentalPrice(eventDays))}</td>\n      </tr>\n      {#if transportFee > 0 && calculatedDistance <= 300}\n        <tr>\n          <td>{formatNumber(calculatedDistance * (eventDays > 1 ? 4 : 2))}</td>\n          <td>{getTranslation('transport.kmRate')}</td>\n          <td>{formatCurrency(transportFee)}</td>\n        </tr>\n      {/if}\n      {#if selectedLanguages.length > 0}\n        <tr>\n          <td>1</td>\n          <td>\n            <div class=\"item-with-remove\">\n              <button class=\"remove-icon\" on:click={() => removeLanguage(selectedLanguages[0])}>×</button>\n              <span>{languageTranslations[selectedLanguages[0]]} {getTranslation('languages.complimentary')}</span>\n            </div>\n          </td>\n          <td>{formatCurrency(0)}</td>\n        </tr>\n      {/if}\n      {#each selectedLanguages.slice(1) as language}\n        <tr>\n          <td>1</td>\n          <td>\n            <div class=\"item-with-remove\">\n              <button class=\"remove-icon\" on:click={() => removeLanguage(language)}>×</button>\n              <span>{languageTranslations[language]}</span>\n            </div>\n          </td>\n          <td>{formatCurrency(125)}</td>\n        </tr>\n      {/each}\n      {#if printOption}\n        <tr>\n          <td>{calculateEventDays(startDate, endDate)}</td>\n          <td>\n            <div class=\"item-with-remove\">\n              <button class=\"remove-icon\" on:click={() => printOption = !printOption}>×</button>\n              <span>{getTranslation('extras.printOption.title')}</span>\n            </div>\n          </td>\n          <td>{formatCurrency(500 * calculateEventDays(startDate, endDate))}</td>\n        </tr>\n      {/if}\n      {#if brandingAdded}\n        <tr>\n          <td>1</td>\n          <td>\n            <div class=\"item-with-remove\">\n              <button class=\"remove-icon\" on:click={toggleBranding}>×</button>\n              <span>{getTranslation('extras.branding.title')}</span>\n            </div>\n          </td>\n          <td>{formatCurrency(750)}</td>\n        </tr>\n      {/if}\n      {#if themaAdded}\n        <tr>\n          <td>1</td>\n          <td>\n            <div class=\"item-with-remove\">\n              <button class=\"remove-icon\" on:click={toggleThema}>×</button>\n              <span>{getTranslation('extras.theme.title')}</span>\n            </div>\n          </td>\n          <td>{formatCurrency(750)}</td>\n        </tr>\n      {/if}\n      {#if getRoastedAdded}\n        <tr>\n          <td>1</td>\n          <td>\n            <div class=\"item-with-remove\">\n              <button class=\"remove-icon\" on:click={toggleGetRoasted}>×</button>\n              <span>{getTranslation('extras.getRoasted.title')}</span>\n            </div>\n          </td>\n          <td>{formatCurrency(350)}</td>\n        </tr>\n      {/if}\n    </tbody>\n    <tfoot>\n      {#if couponDiscount > 0}\n        <tr>\n          <td colspan=\"2\">{getTranslation('pricing.discount')}</td>\n          <td>-{formatCurrency(couponDiscount)}</td>\n        </tr>\n      {/if}\n      <tr>\n        <td colspan=\"2\">{getTranslation('pricing.total')}</td>\n        <td>{formatCurrency(priceBeforeVat)}</td>\n      </tr>\n      <tr>\n        <td colspan=\"2\">{getTranslation('pricing.vat')}</td>\n        <td>{formatCurrency(vatAmountAfterDiscount)}</td>\n      </tr>\n      <tr>\n        <td colspan=\"2\"><strong>{getTranslation('pricing.totalInclVat')}</strong></td>\n        <td><strong>{formatCurrency(totalPriceWithDiscountInclVat)}</strong></td>\n      </tr>\n    </tfoot>\n  </table>\n  {#if keynoteAdded}\n    <div class=\"keynote-remark\">\n      {getTranslation('pricing.keynoteRemark')}\n    </div>\n  {/if}\n</div>\n\n<div class=\"inclusief\">\n  <h1 class=\"h1\">{getTranslation('form.title')}</h1>\n  <form on:submit={handleSubmit}>\n    <div class=\"form-section\">\n      <div class=\"frame\">\n        <div class=\"frame-row\">\n          <div class=\"frame-item\">\n            <div class=\"vanaf required-field\">{getTranslation('form.event')}:</div>\n          </div>\n          <div class=\"frame\">\n            <input \n              type=\"text\" \n              class=\"text\" \n              id=\"event\" \n              name=\"event\"\n              bind:value={eventName}\n              required\n              placeholder={getTranslation('form.eventPlaceholder')}\n            >\n          </div>\n        </div>\n        <div class=\"frame-row\">\n          <div class=\"frame-item\">\n            <div class=\"vanaf required-field\">{getTranslation('form.name')}:</div>\n          </div>\n          <div class=\"frame\">\n            <input \n              type=\"text\" \n              class=\"text\" \n              id=\"contactPerson\" \n              name=\"contactPerson\"\n              bind:value={contactName}\n              required\n              placeholder={getTranslation('form.namePlaceholder')}\n            >\n          </div>\n        </div>\n        <div class=\"frame-row\">\n          <div class=\"frame-item\">\n            <div class=\"vanaf required-field\">{getTranslation('form.email')}:</div>\n          </div>\n          <div class=\"frame\">\n            <input \n              type=\"email\" \n              class=\"text {emailError ? 'error' : ''}\" \n              id=\"email\" \n              name=\"email\"\n              bind:value={email}\n              on:input={handleEmailChange}\n              pattern=\"[^@\\s]+@[^\\s@]+\\.[^\\s@]+\"\n              required\n              placeholder={getTranslation('form.emailPlaceholder')}\n            >\n            {#if emailError}\n              <div class=\"description-text-2\">\n                <span class=\"description-text-span2 error\">{emailError}</span>\n              </div>\n            {/if}\n          </div>\n        </div>\n        <div class=\"frame-row\">\n          <div class=\"frame-item\">\n            <div class=\"vanaf required-field\">{getTranslation('form.phone')}:</div>\n          </div>\n          <div class=\"frame\">\n            <input \n              type=\"tel\" \n              class=\"text {phoneError ? 'error' : ''}\" \n              id=\"contact_phone\" \n              name=\"contact_phone\"\n              bind:value={contactPhone}\n              required\n              placeholder={getTranslation('form.phonePlaceholder')}\n            >\n            {#if phoneError}\n              <div class=\"description-text-2\">\n                <span class=\"description-text-span2 error\">{phoneError}</span>\n              </div>\n            {/if}\n          </div>\n        </div>\n        <div class=\"frame-row\">\n          <div class=\"frame-item\">\n            <div class=\"vanaf required-field\">{getTranslation('form.accountName')}:</div>\n          </div>\n          <div class=\"frame\">\n            <input \n              type=\"text\" \n              class=\"text\" \n              id=\"account_name\" \n              name=\"account_name\"\n              bind:value={accountName}\n              required\n              placeholder={getTranslation('form.organisationPlaceholder')}\n            >\n          </div>\n        </div>\n        <div class=\"frame-row\">\n          <div class=\"frame-item\">\n            <div class=\"vanaf required-field\">{getTranslation('form.address')}:</div>\n          </div>\n          <div class=\"frame\">\n            <div style=\"margin-top: 10px;\">\n              <input \n                type=\"text\" \n                class=\"text\" \n                id=\"address\" \n                name=\"address\"\n                bind:value={address}\n                required\n                placeholder={getTranslation('form.addressPlaceholder')}\n              />\n              <div style=\"margin-top: 10px;\">\n                <div style=\"display: flex; gap: 20px;\">\n                  <div style=\"flex: 1;\">\n                    <input \n                      type=\"text\" \n                      class=\"text\" \n                      id=\"postal_code\" \n                      name=\"postal_code\"\n                      bind:value={postalCode}\n                      required\n                      placeholder={getTranslation('form.postalCodePlaceholder')}\n                    >\n                  </div>\n                  <div style=\"flex: 2;\">\n                    <input \n                      type=\"text\" \n                      class=\"text\" \n                      id=\"city\" \n                      name=\"city\"\n                      bind:value={city}\n                      required\n                      placeholder={getTranslation('form.cityPlaceholder')}\n                    >\n                  </div>\n                </div>\n                <div style=\"margin-top: 10px;\">\n                  <select \n                    class=\"text\" \n                    id=\"country\" \n                    name=\"country\"\n                    bind:value={country}\n                    required\n                  >\n                    <option value=\"\" disabled selected>{getTranslation('dateTime.address.country')}</option>\n                    {#each countries as countryOption}\n                      <option value={countryOption}>{getTranslatedCountry(countryOption)}</option>\n                    {/each}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {#if isEUCountry(country) && country !== 'Nederland'}\n          <div class=\"frame-row\">\n            <div class=\"frame-item\">\n              <div class=\"vanaf\">{getTranslation('form.vatNumber')}:</div>\n            </div>\n            <div class=\"frame\">\n              <input \n                type=\"text\" \n                class=\"text\" \n                id=\"vat_number\" \n                name=\"vat_number\"\n                bind:value={vatNumber}\n                placeholder={getTranslation('form.vatNumberPlaceholder')}\n              >\n            </div>\n          </div>\n        {/if}\n        <div class=\"frame-row\">\n          <div class=\"frame-item\">\n            <div class=\"vanaf\">{getTranslation('form.poNumber')}:</div>\n          </div>\n          <div class=\"frame\">\n            <input \n              type=\"text\" \n              class=\"text\" \n              id=\"po_number\" \n              name=\"po_number\"\n              bind:value={poNumber}\n              placeholder={getTranslation('form.poNumberPlaceholder')}\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"form-section\">\n      <div class=\"frame\">\n        <div class=\"checkbox-option\">\n          <input type=\"checkbox\" id=\"dimensions\" name=\"dimensions\" required bind:checked={dimensionsAccepted}>\n          <label for=\"dimensions\" class=\"p\">\n            {@html getTranslation('form.dimensions.text')}\n          </label>\n        </div>\n        <div class=\"checkbox-option\">\n          <input type=\"checkbox\" id=\"payment\" name=\"payment\" required bind:checked={paymentAccepted}>\n          <label for=\"payment\" class=\"p\">\n            {@html getTranslation('form.payment.text')}\n          </label>\n        </div>\n        <div class=\"checkbox-option\">\n          <input type=\"checkbox\" id=\"terms\" name=\"terms\" required bind:checked={termsAccepted}>\n          <label for=\"terms\" class=\"p\">\n            {@html getTranslation('form.terms.text')}&nbsp;<a href=\"https://poembooth.com/huurovereenkomst\" target=\"_blank\">{getTranslation('form.terms.link')}</a>\n          </label>\n        </div>\n      </div>\n    </div>\n    <div class=\"form-section\">\n      <div class=\"frame\">\n        {#if !isFormValid}\n          <div class=\"validation-status\">\n            <div class=\"validation-message\">\n              {#if Object.values(formValidation).every(section => section.isValid())}\n                {getTranslation('form.validation.complete')}\n              {:else}\n                {getTranslation('form.validation.incomplete')}\n              {/if}\n            </div>\n            <ul class=\"validation-list\">\n              {#each Object.entries(formValidation) as [key, section]}\n                <li class=\"validation-item\" class:completed={section.isValid()}>\n                  <span class=\"validation-check\">\n                    {#if section.isValid()}✓{:else}•{/if}\n                  </span>\n                  <span class=\"validation-text\">{section.title}</span>\n                </li>\n              {/each}\n            </ul>\n          </div>\n        {/if}\n        <div class=\"submit-button-container\">\n          <button \n            type=\"submit\" \n            class=\"submit-button\"\n            disabled={!isFormValid || isSubmitting}\n          >\n            <span>\n              {getTranslation('form.submitBooking')}\n            </span>\n          </button>\n        </div>\n        {#if submitSuccess}\n          <div class=\"success-overlay\" transition:fade>\n            <div class=\"success-modal\" transition:scale={{duration: 400, start: 0.95}}>\n              <div class=\"success-icon\" in:scale={{duration: 600, delay: 200, start: 0.5}} style=\"--pb-logo: url({pbLogo})\"></div>\n              <h2>{getTranslation('form.confetti.title')}</h2>\n              <p>{getTranslation('form.success')}</p>\n              <a href={translations.currentLanguage === 'nl' ? 'https://poembooth.com' : 'https://poembooth.com/en'} \n                 class=\"back-button\">\n                {getTranslation('form.confetti.backButton')}\n              </a>\n            </div>\n          </div>\n        {/if}\n        {#if submitError}\n          <div class=\"description-text-2\">\n            <span class=\"description-text-span2 error\">{submitError}</span>\n          </div>\n        {/if}\n        {#if formErrors.length > 0}\n          <div class=\"error-message\" transition:fade>\n            <p>{getTranslation('form.pleaseComplete')}:</p>\n            <ul>\n              {#each formErrors as error}\n                <li>{error}</li>\n              {/each}\n            </ul>\n          </div>\n        {/if}\n      </div>\n    </div>\n  </form>\n</div>\n\n{#if isSubmitting}\n  <div class=\"loading-overlay\" transition:fade>\n    <div class=\"loading-spinner\"></div>\n  </div>\n{/if}\n"],"names":["language","country"],"mappings":"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"}