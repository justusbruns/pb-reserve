{"version":3,"file":"_server.ts.js","sources":["../../../../../../../src/routes/api/geocoding/+server.ts"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport { env } from '$env/dynamic/private';\n\nexport async function GET({ url }) {\n    console.log('Geocoding API called with params:', Object.fromEntries(url.searchParams));\n    \n    const address = url.searchParams.get('address');\n    const language = url.searchParams.get('language') || 'en';\n    \n    if (!address) {\n        console.error('Missing address parameter');\n        return json({ error: 'Address parameter is required' }, { \n            status: 400,\n            headers: {\n                'content-type': 'application/json',\n                'Cache-Control': 'no-cache'\n            }\n        });\n    }\n\n    if (!env.MAPBOX_TOKEN) {\n        console.error('Missing MAPBOX_TOKEN');\n        return json({ error: 'Mapbox token not configured' }, { \n            status: 500,\n            headers: {\n                'content-type': 'application/json',\n                'Cache-Control': 'no-cache'\n            }\n        });\n    }\n\n    try {\n        console.log('Calling Mapbox API for address:', address);\n        const mapboxUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?` + \n            new URLSearchParams({\n                access_token: env.MAPBOX_TOKEN,\n                language: language,\n                types: 'address,place,country',\n                limit: '5'\n            });\n            \n        console.log('Mapbox URL:', mapboxUrl);\n        \n        const response = await fetch(mapboxUrl);\n        console.log('Mapbox response status:', response.status);\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('Mapbox API error:', errorText);\n            throw new Error(`Mapbox API error: ${response.status} - ${errorText}`);\n        }\n\n        const data = await response.json();\n        console.log('Mapbox API response:', JSON.stringify(data, null, 2));\n        \n        return json(data, {\n            headers: {\n                'content-type': 'application/json',\n                'Cache-Control': 'no-cache'\n            }\n        });\n    } catch (error) {\n        console.error('Geocoding error:', error);\n        return json({ error: 'Failed to geocode address', details: error.message }, { \n            status: 500,\n            headers: {\n                'content-type': 'application/json',\n                'Cache-Control': 'no-cache'\n            }\n        });\n    }\n}\n\n// Reverse geocoding endpoint\nexport async function POST({ request }) {\n    try {\n        const { lng, lat } = await request.json();\n        console.log('Reverse geocoding request for coordinates:', { lng, lat });\n        \n        if (!lng || !lat) {\n            console.error('Missing coordinates');\n            return json({ error: 'Longitude and latitude are required' }, { \n                status: 400,\n                headers: {\n                    'content-type': 'application/json',\n                    'Cache-Control': 'no-cache'\n                }\n            });\n        }\n\n        const mapboxUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?` +\n            new URLSearchParams({\n                access_token: env.MAPBOX_TOKEN,\n                types: 'address',\n                limit: '1'\n            });\n            \n        console.log('Mapbox reverse geocoding URL:', mapboxUrl);\n        \n        const response = await fetch(mapboxUrl);\n        console.log('Mapbox response status:', response.status);\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('Mapbox API error:', errorText);\n            throw new Error(`Mapbox API error: ${response.status} - ${errorText}`);\n        }\n\n        const data = await response.json();\n        console.log('Mapbox API response:', JSON.stringify(data, null, 2));\n        \n        return json(data, {\n            headers: {\n                'content-type': 'application/json',\n                'Cache-Control': 'no-cache'\n            }\n        });\n    } catch (error) {\n        console.error('Reverse geocoding error:', error);\n        return json({ error: 'Failed to reverse geocode coordinates', details: error.message }, { \n            status: 500,\n            headers: {\n                'content-type': 'application/json',\n                'Cache-Control': 'no-cache'\n            }\n        });\n    }\n}\n"],"names":["env"],"mappings":"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"}