{"version":3,"file":"_server.js","sources":["../../../../../../../src/routes/api/submit-form/+server.js"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport { base } from '$lib/server/airtable';\nimport { requireAuth } from '$lib/server/auth';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request }) {\n    try {\n        // Check authentication first\n        const authError = await requireAuth(request);\n        if (authError) return authError;\n\n        const formData = await request.json();\n        console.log('Received form data:', JSON.stringify(formData, null, 2));\n\n        // Validate required fields\n        const requiredFields = [\n            'eventName',\n            'startDate',\n            'endDate',\n            'accountName',\n            'email',\n            'phone',\n            'address',\n            'postalCode',\n            'city',\n            'country',\n            'deliveryStreet',\n            'deliveryPostalCode',\n            'deliveryCity',\n            'deliveryCountry',\n            'contactPerson'\n        ];\n\n        const missingFields = requiredFields.filter(field => !formData[field]);\n        if (missingFields.length > 0) {\n            console.error('Missing required fields:', missingFields);\n            return json({ \n                error: 'Missing required fields', \n                fields: missingFields \n            }, { status: 400 });\n        }\n\n        // Create organization record first\n        console.log('Creating organization...');\n        const organizationData = {\n            'Name organization': formData.accountName,\n            'Email': formData.email,\n            'Address': formData.address,\n            'VAT NR': formData.vatNumber,\n            'Postal code': formData.postalCode,\n            'City': formData.city,\n            'Country': formData.country\n        };\n\n        const organizationRecord = await base.Organizations.create(organizationData);\n        console.log('Organization created:', organizationRecord.id);\n\n        // Create person record\n        console.log('Creating person...');\n        const personData = {\n            'Name': formData.contactPerson,\n            'Mobile number': formData.phone,\n            'Email': formData.email,\n            'Organizations': [organizationRecord.id],\n            'Type of person': 'Customer employee'\n        };\n\n        const personRecord = await base.Persons.create(personData);\n        console.log('Person created:', personRecord.id);\n\n        // Create event record\n        console.log('Creating event...');\n        const eventData = {\n            'Event name': formData.eventName,\n            'Starts at': formData.startDate,\n            'Stops at': formData.endDate,\n            'Languages': formData.selectedLanguages.join(', '),\n            'Total Distance (km)': formData.calculatedDistance || 0,\n            'Status': 'concept',\n            'Location': `${formData.deliveryBusinessName}, ${formData.deliveryStreet}, ${formData.deliveryPostalCode} ${formData.deliveryCity}, ${formData.deliveryCountry}`,\n            'Reserved by': [organizationRecord.id],\n            'Contact person': [personRecord.id]\n        };\n\n        const eventRecord = await base.Events.create(eventData);\n        console.log('Event created:', eventRecord.id);\n\n        // Prepare order array with product IDs\n        const orderArray = [\n            'reced5JPzn1NAhTpw', // Poem Booth 1\n            'recWtYRBAWR4k7i1G'  // Transport\n        ];\n\n        if (formData.printOption) {\n            orderArray.push('recyFUdF9ocIBu22i'); // Printer 1\n        }\n\n        if (formData.themaAdded) {\n            orderArray.push('recLNDdHVMnqaNkjs'); // Theme\n        }\n\n        if (formData.brandingAdded) {\n            orderArray.push('recUFHJDY2tmzopCh'); // Branding\n        }\n\n        if (formData.getRoastedAdded) {\n            orderArray.push('rec5RFM7APWsxnNLT'); // Roast\n        }\n\n        // Add extra language product if more than one language\n        if (formData.selectedLanguages.length > 1) {\n            orderArray.push('rec9c2M0Ve1WthmLY'); // Extra Language\n        }\n\n        if (formData.keynoteAdded) {\n            orderArray.push('recz95xob9UOzdd6z'); // Keynote\n        }\n\n        // Add discount if coupon code is valid\n        if (formData.couponCode === 'EVENTPARTNER') {\n            orderArray.push('recAfS1ryMLkw9FuS'); // EVENTPARTNER discount\n        } else if (formData.couponCode === 'EVENTSPECIALIST') {\n            orderArray.push('recTN1wn6SzyP8f3N'); // EVENTSPECIALIST discount\n        }\n\n        // Create reservation record\n        console.log('Creating reservation...');\n        const reservationData = {\n            'Event name': [eventRecord.id],\n            'Order': orderArray\n        };\n\n        const reservationRecord = await base.Reservations.create(reservationData);\n        console.log('Reservation created:', reservationRecord.id);\n\n        return json({\n            message: 'Form submitted successfully',\n            organizationId: organizationRecord.id,\n            personId: personRecord.id,\n            eventId: eventRecord.id,\n            reservationId: reservationRecord.id\n        });\n\n    } catch (error) {\n        console.error('Error processing form submission:', error);\n        return json({ \n            message: error.message || 'Internal Error',\n            error: error.toString()\n        }, { status: 500 });\n    }\n};\n"],"names":[],"mappings":"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"}